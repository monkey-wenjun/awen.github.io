<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿文的博客</title>
  
  <subtitle>记录生活，分享技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.awen.me/"/>
  <updated>2021-02-26T06:05:29.312Z</updated>
  <id>https://www.awen.me/</id>
  
  <author>
    <name>阿文</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>假如微软断供了怎么办？</title>
    <link href="https://www.awen.me/posts/62ada41b.html"/>
    <id>https://www.awen.me/posts/62ada41b.html</id>
    <published>2020-08-11T23:33:15.000Z</published>
    <updated>2021-02-26T06:05:29.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><p>网传，微软更新了Microsoft服务协议。根据该协议，如果美国政府对微软下达禁令，微软可能无法继续支持Windows服务，并且不承担因此引发的任何后果，只会尽最大努力避免影响。该事件引发网友热议。</p><h2 id="辟谣"><a href="#辟谣" class="headerlink" title="辟谣"></a>辟谣</h2><p>8月10日上午，微软方面对此回应称，近日某些个别社交媒体对微软服务条款全球性更新的谣言，不符合事实。我们为中国用户提供服务的承诺坚定不移。</p><p>笔者随即去阅读了这份争议很大对服务协议，其中确实有“对于因超出微软合理控制范围的情况（例如，劳资纠纷、不可抗力、战争或恐怖主义行为、恶意破坏、意外事故或遵守任何适用法律或政府命令）而导致微软无法履行或延迟履行其义务，微软对此不承担任何责任或义务。微软将尽最大努力降低这些事件的影响，并履行未受影响的义务”等文字表述。</p><p>事实上，不仅仅是微软，很多产品的用户协议中都有对不可抗力相关的说明，这也是一种通用条款。因此，大家大可不必担心。</p><h2 id="假如微软真的断供"><a href="#假如微软真的断供" class="headerlink" title="假如微软真的断供"></a>假如微软真的断供</h2><p>我们大胆的假设下微软如果真的”断供“ 对于我们会有多大对影响呢？我们有没有可替代对方案？</p><p>微软的业务分为云和桌面操作系统以及办公软件这三大块，至于移动端，咳咳，咱就不提了。</p><p>首先，云计算这一块，国内几乎被阿里云、腾讯云等国内巨头占据了大量对市场份额，2018年IDC 中国云计算市场份额报告中，微软Azure 只占5%，而阿里云占比45.5%、腾讯云占比10.3%。这一块断供对我们影响不大。</p><p>但是，如果微软在操作系统这一块对我们实施断供，那么会怎么样，我们来看一组数据，根据 statcounter 机构数据，截至 2019 年 11 月，全球操作系统市场上，Windows 占据了 77.21%的市场份额，OS X 占据了 16.79%的市场份额，Linux 只占据约 1.79%的市场份额。可见微软在桌面端的市场份额和影响力。</p><p>同时，微软在office 办公软件的市场份额也非常高，如果这一块断供，受影响最大对将是企业客户。</p><h2 id="有替代方案吗？"><a href="#有替代方案吗？" class="headerlink" title="有替代方案吗？"></a>有替代方案吗？</h2><p>可能有人会说了微软断供，我们有没有替代方案？事实上，在过去和现在，很多国家在过去都曾尝试努力摆脱对微软对依赖，我们来看看：</p><p>韩国政府宣布计划将政府及公共机构的操作系统替换为基于Linux的开源操作系统，将于2026年完成。而隔壁的朝鲜早就开始使用自主研发了红星操作系统。</p><p>2020年5月，德国慕尼黑政府宣布将放弃Windows系统，逐步开始使用Linux。</p><p>2018年，据俄罗斯《消息报》报道，俄罗斯国防部决定将所有办公电脑操作系统改为自主研发的Astra Linux系统。</p><p>2020年1月14日,微软正式停止Windows 7、Windows Server 2008等操作系统的更新和支持服务,全球数以亿万计的用户失去了官方支持,而中国用户在其中占比最大,他们的系统将在无防护状态下运行。我们今天在一些场合，例如医院看到医生使用的操作系统还是windows  xp， 甚至笔者见过最牛逼对是某电信公司装的操作系统还是windows 98,为什么政府部门不愿升级系统，去采购windows 10 这样的操作系统，因为不安全，也正是这个原因直到 2017 年底，才允许微软与中国电科合资公司修改后发布的「Windows 10神州网信政府版」进入采购目录。Windows 10 神州网信政府版是在 Win10 基础上，根据中国法律法规，针对中国专业领域的需求，定制开发的一个操作系统版本。</p><p>因为无法实现自主可控，对于系统的控制权不在我们自己手上，这也是很多国家在去微软化的最大原因。中国工程院院士倪光南就曾表示信息安全问题是个“定时炸弹”，现在很多事件，像乌克兰停电，就是受到攻击以后整个瘫痪了。所以核心技术如果不掌握，我们可能会遭到供应链给人“卡脖子”，还有安全被人“卡脖子”，实际就造成了像棱镜门事件，或者像乌克兰停电，或者伊朗核设施被人攻击破坏这种情况。</p><p>同时最近一段时间，随着美国对中国对打压，尤其是对华为的打压，我们国内逐渐意识到了实现技术自主和去美化有多么重要，但是事实上去微软化的路程是非常艰辛和急需要耐心的。</p><p>上面说对德国慕尼黑政府宣布将放弃Windows系统，事实上，早在2003 年，受微软终止支持 Windows NT 4.0 的影响，慕尼黑决定抛弃Windows，而使用Linux，但是在2017年最终还是又开始回归了 Windows。这是为啥？因为 Linux 虽然安全可靠、可控，但是生态建设不如windows，普及性和易用性不如Windows，像专业的Photoshop和一些工业软件无法在Linux上使用。</p><p>而在国内，倪光南院士曾在公开场合中表示，目前国内一些重要的部门已经率先开启了用国产Linux系统替代国外系统的过程。另外国家税务总局就采购了中兴新支点操作系统，由此可以看出在替换Windows这方面，国家已经有所行动了。</p><p><strong>如果Windows真的断供，将是国产软件的重大机遇。</strong></p><p>国内已经有不少基于Linux内核研发的操作系统产品，据笔者了解到，以武汉深之度科技有限公司为首的一批国内做操作系统的厂商组建的统信软件，正在打造“中国操作系统创新生态”，目标就是为了解决我国操作系统受制于人的心腹之患。目前来看笔者体验后UOS 和开源的deepin 非常相似，但是UOS会更稳定些，对于普通用户做了些权限限制，比如不能使用root，总体使用上感觉虽然和windows 还存在一定对差距，例如没有原生的微信以及专业对工业级软件，但是简单的办公是没有问题的，其通过Wine 实现的各种windows 平台软件也可以运行，但是体验稍差，生态方面还需要持续建设，目前统信UOS 还在不断在适配各种国产软件，我们目前可以看到例如网易云音乐、wps办公软件、百度网盘、搜狗百度和讯飞输入法等软件的影子，从UOS的适配名单中笔者还看到了大量的国产软件开始适配系统和国产CPU。同时UOS的界面非常的漂亮，有点集windows和mac 的所有有点一样。</p><p><img src="https://file.awen.me/blog/image-20200811070750189.png" alt="image-20200811070750189"></p><p>对于程序员而言，各种IDE全家桶都是原生的，例如JetBrains全家桶、vscode等大量开源软件，可以说对于程序员而言，使用Linux 是最没有成本和最舒服的。</p><p>同时在游戏方面还有steam上各种原生的Linux 游戏，例如巫师3、Dota2、GTA等游戏，体验完全不比windows 下差。</p><p><img src="https://file.awen.me/blog/image-20200811071038223.png" alt="image-20200811071038223"></p><p>另外悄悄告诉你们，这篇文章笔者就是在manjaro kde  下完成的。现在的Linux 的体验已经不比windows 差了，甚至windows在很多方面有抄袭（借鉴）的意思，比如windows 10 的多桌面。</p><p>几年前，我们讨论的是去IOE、即去IBM、Oroce、EMC，现在，我们讨论的是如何实现硬件自主和系统自主，相信在未来，我们一定可以使用上国内的操作系统，<strong>但是请你相信，微软是不会放弃中国这么一块巨大的市场的。</strong>所以完全不用担心使用不了Windows，这是对于普通人而言，而对于国家而言，自主可控就显得无比重要了。我们不得不承认的一件事情就是在这一块我们还有很长的路要走。任重而道远，我们需要更多的实干家来不断完善生态，而不是打着国产操作系统的牌子行骗或者只是演讲台上的PPT。</p><p>如果真有那么一天，你会用国产操作系统吗？欢迎评论区留言。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新闻&quot;&gt;&lt;a href=&quot;#新闻&quot; class=&quot;headerlink&quot; title=&quot;新闻&quot;&gt;&lt;/a&gt;新闻&lt;/h2&gt;&lt;p&gt;网传，微软更新了Microsoft服务协议。根据该协议，如果美国政府对微软下达禁令，微软可能无法继续支持Windows服务，并且不承担因此引
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>有赞云扩展点使用数据库实现自定义积分扩展点</title>
    <link href="https://www.awen.me/posts/f3e5904.html"/>
    <id>https://www.awen.me/posts/f3e5904.html</id>
    <published>2020-04-21T22:58:32.000Z</published>
    <updated>2021-02-26T06:05:29.342Z</updated>
    
    <content type="html"><![CDATA[<p>如果商家拥有自己的ERP系统或会员系统，希望与有赞云的商城进行打通，那么可以通过使用自用型容器+Mysql 实现将会员的积分信息持久化到独立的数据库中去，有赞云提供了一整套的积分扩展点，包括增加、查询、扣减、消耗积分等扩展点，具体扩展点的用法可以参考文档<a href="https://doc.youzanyun.com/doc#/content/EXT/0-3" target="_blank" rel="noopener">https://doc.youzanyun.com/doc#/content/EXT/0-3</a></p><p>本文主要针对如何使用积分扩展点以及如何实现与有赞云独立的数据库进行整合进行简单的介绍，本案例中用到的数据库仅为测试使用，且只是为了演示如何使用，不对具体的业务逻辑做具体的实现</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1.首先，打开clone 下来的工程，根据如图所示的<code>youzanyun-demo-dal</code>位置添加对应的实体类、Mapper、Mapper.xml文件</p><p><img src="https://file.awen.me/blog/20200422073838.png!awen" alt="20200422073838"></p><p>我这里简单贴下我的代码</p><p>对应的mapper UserSourceMapper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserSourceMapper &#123;</span><br><span class="line">    int updateUserSource(UserSource userSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dataobject 中的usersource 下的UserSource</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class UserSource &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 账号ID</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String accountId;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 账号类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String accountType;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 积分值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Integer amount;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 增加积分描述信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String description;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 业务标识</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Integer eventType;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 订单号</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String bizVlue;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 操作员</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String operatorName;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 扩展信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Map&lt;String,Object&gt; extraInfo;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;getter 省略</span><br><span class="line">    &#x2F;&#x2F;setter 省略</span><br></pre></td></tr></table></figure><p>reources 下的mapper 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.youzan.cloud.youzanyun.demo.dal.dao.mapper.UserSourceMapper&quot;&gt;</span><br><span class="line">    &lt;update id&#x3D;&quot;updateUserSource&quot; parameterType&#x3D;&quot;com.youzan.cloud.youzanyun.demo.dal.dataobject.usersource.UserSource&quot;&gt;</span><br><span class="line">        UPDATE user_source set amount&#x3D;#&#123;amount&#125;,description&#x3D;#&#123;description&#125;,</span><br><span class="line">        account_type&#x3D;#&#123;accountType&#125;,biz_vlue&#x3D;#&#123;bizVlue&#125;,</span><br><span class="line">        operator_name&#x3D;#&#123;operatorName&#125;,event_type&#x3D;#&#123;eventType&#125; WHERE account_id&#x3D;#&#123;accountId&#125;</span><br><span class="line">    &lt;&#x2F;update&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>里面对应的数据库表，会在创建数据库时说明，接下来，我们在有赞云控制台的应用管理-配置管理-应用变量中新增如下配置</p><table><thead><tr><th>键</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>mybatis.mapperLocations</td><td>classpath:mybatis/mapper/*.xml</td><td>mapper文件路径</td></tr><tr><td>mybatis.typeAliasesPackage</td><td>com.youzan.cloud.youzanyun.demo.dal.dao</td><td>dao包路径</td></tr><tr><td>mybatis.typeAliasesPackage</td><td>com.youzan.cloud.youzanyun.demo.dal.dataobject</td><td>实体类路径</td></tr><tr><td>druid.datasource.url</td><td>jdbc:mysql://10.60.164.192:3306/test?characterEncoding=utf-8</td><td>数据连接地址</td></tr><tr><td>druid.datasource.password</td><td>password</td><td>密码</td></tr><tr><td>druid.datasource.username</td><td>root</td><td>用户名</td></tr><tr><td>druid.datasource.driverClassName</td><td>com.mysql.jdbc.Driver</td><td>驱动</td></tr></tbody></table><p><img src="https://file.awen.me/blog/20200422070854.png!awen" alt="20200422070854"></p><p>然后我们返回工程，我们在如下位置新建一个 <code>IncreasePointsExtPointDemoImpl</code> 积分扩展点实现类，当然你放在自己建的目录中也可以</p><p><img src="https://file.awen.me/blog/20200422071753.png!awen" alt="20200422071753"></p><p>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@ExtensionService(&quot;increasePointsExtPointDemo&quot;)</span><br><span class="line">public class IncreasePointsExtPointDemoImpl implements IncreasePointsExtPoint &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserSourceMapper userSourceMapper;</span><br><span class="line">    @Override</span><br><span class="line">    public OutParam&lt;Result&gt; invoke(ExtPointsIncreaseDTO extPointsIncreaseDTO) &#123;</span><br><span class="line">        log.info(&quot;【北洛-执行扩展点】-增加用户积分 &#123;&#125;&quot;,JSON.toJSONString(extPointsIncreaseDTO));</span><br><span class="line">        try &#123;</span><br><span class="line">            UserSource userSource &#x3D; new UserSource();</span><br><span class="line">            userSource.setAccountId(extPointsIncreaseDTO.getExtCustomerInfoDTO().getAccountId());</span><br><span class="line">            userSource.setAccountType(extPointsIncreaseDTO.getExtCustomerInfoDTO().getAccountType());</span><br><span class="line">            userSource.setAmount(extPointsIncreaseDTO.getAmount());</span><br><span class="line">            userSource.setBizVlue(extPointsIncreaseDTO.getBizValue());</span><br><span class="line">            userSource.setDescription(extPointsIncreaseDTO.getDescription());</span><br><span class="line">            userSource.setEventType(extPointsIncreaseDTO.getEventType());</span><br><span class="line">            userSource.setExtraInfo(extPointsIncreaseDTO.getExtraInfo());</span><br><span class="line">            userSource.setOperatorName(extPointsIncreaseDTO.getOperatorName());</span><br><span class="line">            log.info(userSource.toString());</span><br><span class="line">            userSourceMapper.updateUserSource(userSource);</span><br><span class="line">            return OutParamUtil.successResult(increasePoints(extPointsIncreaseDTO));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;增加用户积分异常 &#123;&#125;&quot;, e);</span><br><span class="line">            return OutParamUtil.failResult(&quot;增加用户积分异常：&quot; + e, new Result());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Result increasePoints(ExtPointsIncreaseDTO extPointsIncreaseDTO) throws SDKException &#123;</span><br><span class="line">        Long userId &#x3D; Long.valueOf(extPointsIncreaseDTO.getExtCustomerInfoDTO().getAccountId());</span><br><span class="line">        Result result &#x3D; new Result();</span><br><span class="line">        result.setData(true);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们需要去数据库配置数据库，在应用管理中的组件管理，新增一个mysql</p><p><img src="https://file.awen.me/blog/20200422072045.png!awen" alt="20200422072045"></p><p>然后点管理，可以看到你的数据库信息，包括IP 端口 用户名和密码</p><p><img src="https://file.awen.me/blog/20200422072151.png!awen" alt="20200422072151"></p><p>点击管理控制台，登录phpmyadmin</p><p><img src="https://file.awen.me/blog/20200422072305.png!awen" alt="20200422072305"></p><p>比如我这里创建的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;user_source&#96; (</span><br><span class="line">  &#96;id&#96; bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,</span><br><span class="line">  &#96;account_id&#96; varchar(128) DEFAULT NULL,</span><br><span class="line">  &#96;description&#96; varchar(128) DEFAULT NULL,</span><br><span class="line">  &#96;account_type&#96; varchar(64) DEFAULT NULL,</span><br><span class="line">  &#96;amount&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;event_type&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;biz_vlue&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;operator_name&#96; varchar(64) NOT NULL,</span><br><span class="line">  &#96;extra_info&#96; varchar(128) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8mb4</span><br></pre></td></tr></table></figure><p>然后在里面插入一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user_source (account_id, account_type, amount, description, event_type , biz_vlue, operator_name, extra_info) VALUES (&#39;17563168&#39;, &#39;YouZanAccount&#39;, 10, &#39;1&#39;, 100 , &#39;null&#39;, &#39;13148484985&#39;, &#39;null&#39;)</span><br></pre></td></tr></table></figure><p>我们将编写好的代码push 到服务器，然后在业务配置-配置管理中的会员中心后端扩展中开启对应的扩展点。因为是测试，不需要配置业务标识</p><p><img src="https://file.awen.me/blog/20200422074413.png!awen" alt="20200422074413"></p><p>然后在控制台点击发布，在应用管理-发布管理，点击发布，选择服务端发布</p><p><img src="https://file.awen.me/blog/20200422074325.png!awen" alt="20200422074325"></p><p>发布成功后，我们在对应的微商城中的客户管理里面给上面插入的客户给积分（注意，这个用户的数据我已经提前插入到数据库中，不然是无法更新的</p><p><img src="https://file.awen.me/blog/20200422074646.png!awen" alt="20200422074646"></p><p>如果发现没有成功，建议在扩展点打一些日志，然后在运维管理-日志管理中查看对应的日志信息，如下所示可以看到已经成功进入扩展点并打了日志</p><p><img src="https://file.awen.me/blog/20200422074815.png!awen" alt="20200422074815"></p><p>我们可以在数据库中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user_source;</span><br></pre></td></tr></table></figure><p>可以看到积分已经变成3000了，表示整合mybatis 对数据库进行更新成功了</p><p><img src="https://file.awen.me/blog/20200422074915.png!awen" alt="20200422074915"></p><p>那么我们知道怎么去实现增加积分，我们也可以照葫芦画瓢的去实现查询和消耗等扩展点</p><h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><p>1.报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-04-22 07:25:14.032 ERROR 31 --- [DubboServerHandler-10.62.180.70:7200-thread-2] wsc-pc-scrm-0a5b1aad-1587511513395-472276 y.c.y.d.b.IncreasePointsExtPointDemoImpl : 增加用户积分异常 &#123;&#125;</span><br><span class="line"></span><br><span class="line">org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.youzan.cloud.youzanyun.demo.dal.dao.mapper.UserSourceMapper.updateUserSource</span><br></pre></td></tr></table></figure><p>解决，确认你的mybatis.mapperLocations 对应的路径是否正确</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果商家拥有自己的ERP系统或会员系统，希望与有赞云的商城进行打通，那么可以通过使用自用型容器+Mysql 实现将会员的积分信息持久化到独立的数据库中去，有赞云提供了一整套的积分扩展点，包括增加、查询、扣减、消耗积分等扩展点，具体扩展点的用法可以参考文档&lt;a href=&quot;h
      
    
    </summary>
    
    
      <category term="有赞云" scheme="https://www.awen.me/categories/%E6%9C%89%E8%B5%9E%E4%BA%91/"/>
    
    
      <category term="有赞云" scheme="https://www.awen.me/tags/%E6%9C%89%E8%B5%9E%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Mybatis</title>
    <link href="https://www.awen.me/posts/1b5afac3.html"/>
    <id>https://www.awen.me/posts/1b5afac3.html</id>
    <published>2020-04-21T01:59:36.000Z</published>
    <updated>2021-02-26T06:05:29.266Z</updated>
    
    <content type="html"><![CDATA[<p>在介绍整合Mybatis 前，我们先介绍下如何使用传统的Dao 类方式来实现</p><p>首先，配置maven</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.47&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;8.0.19&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;2.1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br></pre></td></tr></table></figure><p>然后我们在application.properties 中进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.type&#x3D;com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;mybatis_db?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;123456</span><br></pre></td></tr></table></figure><p>接下来我们创建一个User 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String jobs;</span><br><span class="line">    private String phone;</span><br><span class="line">    &#x2F;&#x2F;get</span><br><span class="line">    &#x2F;&#x2F;set</span><br></pre></td></tr></table></figure><p>然后创建一个UserDao 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public class UserDao &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    public int addUser(User user)&#123;</span><br><span class="line">        return jdbcTemplate.update(&quot;INSERT INTO t_user(username,jobs,phone) VALUE (?,?,?)&quot;,</span><br><span class="line">                user.getName(),user.getJobs(),user.getPhone());</span><br><span class="line">    &#125;</span><br><span class="line">    public int updateUser(User user)&#123;</span><br><span class="line">        return jdbcTemplate.update(&quot;UPDATE t_user SET username&#x3D;?,jobs&#x3D;?,phone&#x3D;? WHERE id&#x3D;?&quot;,</span><br><span class="line">                user.getName(),user.getJobs(),user.getPhone(),user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    public int deleteUser(Integer id)&#123;</span><br><span class="line">        return jdbcTemplate.update(&quot;DELETE  FROM t_user WHERE id&#x3D;?&quot;,id);</span><br><span class="line">    &#125;</span><br><span class="line">    public User getUserById(Integer id)&#123;</span><br><span class="line">        return jdbcTemplate.queryForObject(&quot;SELECT * FROM t_user WHERE id &#x3D;?&quot;,new BeanPropertyRowMapper&lt;&gt;(User.class),id);</span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;User&gt; getAllUser()&#123;</span><br><span class="line">        return jdbcTemplate.query(&quot;SELECT * FROM t_user&quot;,new BeanPropertyRowMapper&lt;&gt;(User.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来创建一个UserService 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line">    public int addUser(User user)&#123;</span><br><span class="line">        return userDao.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    public int updateUser(User user)&#123;</span><br><span class="line">        return userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    public int deleteUser(Integer id)&#123;</span><br><span class="line">        return userDao.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">    public  User getUserById(Integer id)&#123;</span><br><span class="line">        return userDao.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;User&gt; getAllUser()&#123;</span><br><span class="line">        return userDao.getAllUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是UserController类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line">    @GetMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">    public void UserOps()&#123;</span><br><span class="line">        User u1 &#x3D; new User();</span><br><span class="line">        u1.setName(&quot;章三三&quot;);</span><br><span class="line">        u1.setJobs(&quot;程序员&quot;);</span><br><span class="line">        u1.setPhone(&quot;131444224433&quot;);</span><br><span class="line">        int i &#x3D; userService.addUser(u1);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        List&lt;User&gt; allUser &#x3D; userService.getAllUser();</span><br><span class="line">        System.out.println(allUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们运行程序，然后访问127.0.0.1:8080/user 我们看到IDE 控制台输出了如下内容<br><img src="https://file.awen.me/blog/20200421103149.png!awen" alt="20200421103149"></p><p>访问数据库，我们查询后结果如下</p><p><img src="https://file.awen.me/blog/20200421103223.png!awen" alt="20200421103223"></p><p>这是传统Dao 方式的整合，接下来，我们讲下使用Mybatis 整合</p><p>首先，在pom.xml 中增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>然后创建一个Mapper 文件夹，在该文件夹下创建一个UserMapper 接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">     int addUser(User user);</span><br><span class="line">     int deleteUser(int id);</span><br><span class="line">     int updateUser(User user);</span><br><span class="line">     User getUserById(Integer id);</span><br><span class="line">     List&lt;User&gt; getAllUsers();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在resource下创建一个Mapper 文件夹，然后在文件夹中创建一个UserMapper.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.example.demo.Mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;insert id&#x3D;&quot;addUser&quot; parameterType&#x3D;&quot;com.example.demo.Bean.User&quot;&gt;</span><br><span class="line">        INSERT INTO t_user(username,jobs,phone) VALUE (#&#123;username&#125;,#&#123;jobs&#125;,#&#123;phone&#125;)</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line">    &lt;delete id&#x3D;&quot;deleteUser&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">        DELETE FROM t_user WHERE id&#x3D;#&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;delete&gt;</span><br><span class="line">    &lt;update id&#x3D;&quot;updateUser&quot; parameterType&#x3D;&quot;com.example.demo.Bean.User&quot;&gt;</span><br><span class="line">        UPDATE t_user set username&#x3D;#&#123;username&#125;,jobs&#x3D;#&#123;jobs&#125;,phone&#x3D;#&#123;phone&#125; WHERE id&#x3D;#&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;update&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;getUserById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;com.example.demo.Bean.User&quot;&gt;</span><br><span class="line">        SELECT * FROM t_user WHEN id&#x3D;#&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;getAllUsers&quot; resultType&#x3D;&quot;com.example.demo.Bean.User&quot;&gt;</span><br><span class="line">        SELECT * FROM t_user</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>然后对之前的UserService 类进行改造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    public int addUser(User user)&#123;</span><br><span class="line">        return userMapper.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    public int updateUser(User user)&#123;</span><br><span class="line">        return userMapper.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    public int deleteUser(Integer id)&#123;</span><br><span class="line">        return userMapper.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">    public  User getUserById(Integer id)&#123;</span><br><span class="line">        return userMapper.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;User&gt; getAllUser()&#123;</span><br><span class="line">        return userMapper.getAllUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们在application.properties中添加mybatis 的配置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mybatis.typeAliasesPackage&#x3D;com.example.demo.Mapper</span><br><span class="line">mybatis.mapperLocations&#x3D;classpath:Mapper&#x2F;*.xml</span><br></pre></td></tr></table></figure><p>最后，我们修改下UserController</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line">    @GetMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">    public void UserOps()&#123;</span><br><span class="line">        User u1 &#x3D; new User();</span><br><span class="line">        u1.setName(&quot;李思思&quot;);</span><br><span class="line">        u1.setJobs(&quot;美工&quot;);</span><br><span class="line">        u1.setPhone(&quot;131444224443&quot;);</span><br><span class="line">        int i &#x3D; userService.addUser(u1);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        List&lt;User&gt; allUser &#x3D; userService.getAllUser();</span><br><span class="line">        System.out.println(allUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，我们访问结果如下</p><p><img src="https://file.awen.me/blog/20200421105525.png!awen" alt="20200421105525"></p><p>查询数据库</p><p><img src="https://file.awen.me/blog/20200421105657.png!awen" alt="20200421105657"></p><p>整个工程的目录结构如下</p><p><img src="https://file.awen.me/blog/20200421110020.png!awen" alt="20200421110020"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在介绍整合Mybatis 前，我们先介绍下如何使用传统的Dao 类方式来实现&lt;/p&gt;
&lt;p&gt;首先，配置maven&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.awen.me/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.awen.me/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>如何使用有赞云的扩展点实现自己的业务逻辑</title>
    <link href="https://www.awen.me/posts/3040ba35.html"/>
    <id>https://www.awen.me/posts/3040ba35.html</id>
    <published>2020-04-18T11:46:28.000Z</published>
    <updated>2021-02-26T06:05:29.324Z</updated>
    
    <content type="html"><![CDATA[<p>很多用户在购买了有赞的微商城之后，在使用过程中发现有赞默认提供的标准化接口不能够满足自己的实际需求，事实上，不同的行业都会有一些自己行业的流程，比如说电子卡券，用户下单购买电子卡券，默认有赞这边会调用电子卡券创建接口生成卡券信息返回给用户，但是处于用户信息安全考虑这个卡券信息商家自己是看不到的，那么商家希望针对电子卡券实现定制化开发使用标准的接口就行不通了，打个比方，商家希望实现一个电子卡券增送给用户的功能，可以将卡券信息写到一张图片后通过微信分享给好友，那么通过有赞默认提供的电子卡券功能就无法实现，那么商家希望拿到电子卡券的信息就只能自己去定制化开发，这个时候就需要使用到有赞云的有容器服务开通扩展点实现对创建电子卡券接口的定制化开发。</p><p>那么本文就针对创建电子卡券的这个流程进行讲解如何去使用扩展点实现这一功能。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，要使用扩展点，你必须具备以下条件：</p><ul><li>拥有有赞微商城、有赞零售的对应店铺，且店铺未过期</li><li>拥有有赞云创建有容器的条件，需要通过审核</li></ul><h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><p>这里假设你已经创建了自用型容器，我们从首页进入到该容器中，将项目克隆到本地</p><p>切换到git 仓库信息，复制仓库地址，然后在克隆的时候填写username 和password，username就是你注册平的手机号，password 就是Gittoken</p><p><img src="https://file.awen.me/blog/20200418200549.png!awen" alt="20200418200549"></p><h2 id="配置maven"><a href="#配置maven" class="headerlink" title="配置maven"></a>配置maven</h2><p>克隆后先不要着急 import 项目，我们先配置下Maven的setting.xml文件，你可以复制我下面的,我这里使用的maven 版本是apache-maven-3.6.3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;settings xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0&quot;</span><br><span class="line">          xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">          xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;settings-1.0.0.xsd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;pluginGroups&gt; </span><br><span class="line">  &lt;&#x2F;pluginGroups&gt;</span><br><span class="line">  &lt;proxies&gt;</span><br><span class="line">  &lt;&#x2F;proxies&gt;</span><br><span class="line">  &lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;        </span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">  &lt;&#x2F;mirrors&gt;</span><br><span class="line">  &lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">      &lt;id&gt;dev&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;youzanyun-releases&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;Nexus Release Repository&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.youzanyun.com&#x2F;repository&#x2F;maven-releases&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">              &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">            &lt;&#x2F;releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">              &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">            &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;youzanyun-snapshots&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;Nexus Snapshot Repository&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.youzanyun.com&#x2F;repository&#x2F;maven-snapshots&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">              &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">            &lt;&#x2F;releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">              &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">            &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;spring&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;spring&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">        &lt;&#x2F;releases&gt;</span><br><span class="line">        &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">        &lt;&#x2F;snapshots&gt;</span><br><span class="line">      &lt;&#x2F;repository&gt;</span><br><span class="line">      &lt;&#x2F;repositories&gt;</span><br><span class="line">      &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">          &lt;id&gt;youzanyun-plugin&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;name&gt;youzanyun repository&lt;&#x2F;name&gt;</span><br><span class="line">          &lt;url&gt;http:&#x2F;&#x2F;maven.youzanyun.com&#x2F;repository&#x2F;maven-releases&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">      &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;  </span><br><span class="line">  &lt;&#x2F;profiles&gt;</span><br><span class="line"></span><br><span class="line">  &lt;activeProfiles&gt;</span><br><span class="line">    &lt;activeProfile&gt;dev&lt;&#x2F;activeProfile&gt;</span><br><span class="line">  &lt;&#x2F;activeProfiles&gt;</span><br><span class="line">  </span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure><h2 id="工程说明"><a href="#工程说明" class="headerlink" title="工程说明"></a>工程说明</h2><p>然后打开idea，导入项目并下载对应的jar包，整个项目大概是这样的</p><p><img src="https://file.awen.me/blog/20200418200924.png!awen" alt="20200418200924"></p><p>上图是创建应用后通过 git clone 下来的工程结构，应用名称为 youzanyun-demo，默认生成有六个 module。</p><p>项目根包名：com.youzan.cloud.youzanyun.demo。</p><p>接下来按图例说明一下：</p><ul><li><p>youzanyun-demo-api：接口声明 XXService.java、DTO 封装等，一般在这个模块里不会去依赖其他模块和第三方依赖；</p></li><li><p>youzanyun-demo-biz：服务实现模块，除了在该模块里写 XXServiceImpl.java 外，最主要的还会在这里编写业务扩展点实现类和消息扩展点实现类；</p></li><li><p>youzanyun-demo-dal：如果你的应用中用到了数据库，需要在这个模块里去写 dao、mapper 等，应用框架默认支持 druid 和 mybatis；</p></li><li><p>youzanyun-demo-deploy：这个模块是用来打包的，执行 mvn package 后的最终 jar 包生成模块，所以生成后不需要去改动里面的内容，改动后可能会导致发布失败；</p></li><li><p>youzanyun-demo-web：项目的一些 web 相关的类放在这个模块里，如 XXController.java，以及一些静态资源（js、css、页面等等）；</p></li><li><p>youzanyun-demo-ui：前端扩展点定制需要在该目录下实现。 h5-extension，H5定制目录；mp-extension，小程序定制目录，创建应用后默认不会有这个目录，通过开发者工具导入项目之后会自动生成。</p></li></ul><h2 id="实现电子卡券扩展点"><a href="#实现电子卡券扩展点" class="headerlink" title="实现电子卡券扩展点"></a>实现电子卡券扩展点</h2><p>按照说明我们要实现对应的扩展点，需要在如下目录中去创建对应的后端业务扩展点，也就是youzanyun-demo-biz\src\main\java\com.youzan.cloud.youzan.demo.biz，注意不要去修改包名称，否则可能无法加载到对应的Bean</p><p><img src="https://file.awen.me/blog/20200418201129.png!awen" alt="20200418201129"></p><p>接下来，我们开始创建扩展点，这里我演示下创建电子卡券扩展点，首先我们创建一个 CreateTicketExtImplDemo 的类，然后这个类的基本结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@ExtensionService(&quot;createticketdemo&quot;)</span><br><span class="line">public class CreateTicketExtImplDemo implements CreateTicketExtPoint &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public OutParam&lt;CreateTicketResponseDTO&gt; create(CreateTicketRequestDTO request) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说下上面的class</p><ul><li>@Slf4j 这个没什么好说的，就是开启日志注解，Springboot 自带的</li><li>@ExtensionService 表示这个class 是一个扩展点，这个扩展点的名称是createticketdemo，最终会在控制台看到这个名称对应的扩展点</li><li>public class CreateTicketExtImplDemo implements CreateTicketExtPoint 表示这个CreateTicketExtImplDemo 实现了CreateTicketExtPoint 这个接口，CreateTicketExtPoint 就是创建电子卡券的扩展点接口</li><li>public OutParam<CreateTicketResponseDTO> create(CreateTicketRequestDTO request) 就是这个接口对应的方法，我们需要重写这个方法</li></ul><p>那么，我们接下来只需要在这个方法里面写上具体的业务逻辑，然后将结果返回给有赞云就行，有赞云提供了丰富的扩展点接口，你可以参考文档 <a href="https://doc.youzanyun.com/doc#/content/EXT/0-1" target="_blank" rel="noopener">https://doc.youzanyun.com/doc#/content/EXT/0-1</a></p><p>以创建电子卡券接口为了，我们需要用到2个接口</p><ul><li>电子卡券扩展点 <a href="https://doc.youzanyun.com/doc#/content/EXT/0-1/detail/ext/753" target="_blank" rel="noopener">https://doc.youzanyun.com/doc#/content/EXT/0-1/detail/ext/753</a> 可以看到request 里面的有很多参数，但是各位不要以正常的HTTP 请求逻辑去理解这个扩展点，这里面的request 是不需要用户去传参请求的，这些参数是用户下单购买电子卡券的时候会把这些信息传到你开启的这个扩展点里面来。</li><li>第三方电子卡券创建接口  <a href="https://doc.youzanyun.com/doc#/content/API/1-307/detail/api/0/586" target="_blank" rel="noopener">https://doc.youzanyun.com/doc#/content/API/1-307/detail/api/0/586</a>  这个接口我们需要传入订单号、统一核销码和券码三个信息，有赞云会跟进用户自定义的卡券信息来生成卡券。</li></ul><p>那么对应的业务逻辑基本如下:</p><ul><li>用户从页面创建电子卡券类型订单</li><li>订单信息通过创建电子卡券扩展点传进来</li><li>获取订单号并调用第三方卡券创建接口传入该订单号、用户自定义卡券信息和券码，有赞云跟进信息生成卡券，那么在调用第三方卡券的时候我们还需要生成token才能去调用接口</li><li>返回成功信息</li></ul><p>最终代码如下，仅供参考，实际请根据业务需要实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">package com.youzan.cloud.youzanyun.demo.biz;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.youzan.api.rpc.annotation.ExtensionService;</span><br><span class="line">import com.youzan.cloud.base.api.BifrostService;</span><br><span class="line">import com.youzan.cloud.extension.api.trade.CreateTicketExtPoint;</span><br><span class="line">import com.youzan.cloud.extension.param.trade.CreateTicketRequestDTO;</span><br><span class="line">import com.youzan.cloud.extension.param.trade.CreateTicketResponseDTO;</span><br><span class="line">import com.youzan.cloud.metadata.common.OutParam;</span><br><span class="line">import com.youzan.cloud.open.sdk.common.constant.OAuthEnum;</span><br><span class="line">import com.youzan.cloud.open.sdk.common.exception.SDKException;</span><br><span class="line">import com.youzan.cloud.open.sdk.core.client.auth.Token;</span><br><span class="line">import com.youzan.cloud.open.sdk.core.oauth.model.OAuthToken;</span><br><span class="line">import com.youzan.cloud.open.sdk.gen.v3_0_1.api.YouzanTradeVirtualticketThirdCreate;</span><br><span class="line">import com.youzan.cloud.open.sdk.gen.v3_0_1.model.YouzanTradeVirtualticketThirdCreateParams;</span><br><span class="line">import com.youzan.cloud.open.sdk.gen.v3_0_1.model.YouzanTradeVirtualticketThirdCreateResult;</span><br><span class="line">import com.youzan.cloud.youzanyun.demo.biz.util.OutParamUtil;</span><br><span class="line">import lombok.SneakyThrows;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Auth: fangwenjun</span><br><span class="line"> * @E-mail: fangwenjun@youzan.com</span><br><span class="line"> * @title: CreateTicketExtImplDemo</span><br><span class="line"> * @projectName: youzanyun-demo</span><br><span class="line"> * @description: TODO 描述信息</span><br><span class="line"> * @Date 2020&#x2F;4&#x2F;17 7:23 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line">@Slf4j</span><br><span class="line">@ExtensionService(&quot;createticketdemo&quot;)</span><br><span class="line">public class CreateTicketExtImplDemo implements CreateTicketExtPoint &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private BifrostService bifrostSdkService;</span><br><span class="line">    @SneakyThrows</span><br><span class="line">    @Override</span><br><span class="line">    public OutParam&lt;CreateTicketResponseDTO&gt; create(CreateTicketRequestDTO createTicketRequestDTO) &#123;</span><br><span class="line">        log.info(&quot;创建商家自有卡券, 请求体，&#123;&#125;&quot;, JSON.toJSONString(createTicketRequestDTO));</span><br><span class="line">        CreateTicketResponseDTO createTicketResponseDTO &#x3D; new CreateTicketResponseDTO();</span><br><span class="line">        &#x2F;&#x2F; 创建Token</span><br><span class="line">        OAuthToken token &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            token &#x3D; bifrostSdkService.getToken(&quot;43727705&quot;, OAuthEnum.TokenType.silent);</span><br><span class="line">        &#125; catch (SDKException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        String accessToken &#x3D; token.getAccessToken();</span><br><span class="line">        log.info(&quot;获取到的token &#123;&#125;&quot;,accessToken);</span><br><span class="line">        &#x2F;&#x2F;调用创建电子卡券API</span><br><span class="line">        YouzanTradeVirtualticketThirdCreate youzanTradeVirtualticketThirdCreate &#x3D; new YouzanTradeVirtualticketThirdCreate();</span><br><span class="line">        YouzanTradeVirtualticketThirdCreateParams youzanTradeVirtualticketThirdCreateParams &#x3D; new YouzanTradeVirtualticketThirdCreateParams();</span><br><span class="line">        youzanTradeVirtualticketThirdCreateParams.setTid(createTicketRequestDTO.getOrderNo());</span><br><span class="line">        youzanTradeVirtualticketThirdCreateParams.setCode(RandomCode());</span><br><span class="line">        youzanTradeVirtualticketThirdCreateParams.setTicketNos(RandomTicketNos());</span><br><span class="line">        youzanTradeVirtualticketThirdCreate.setAPIParams(youzanTradeVirtualticketThirdCreateParams);</span><br><span class="line">        YouzanTradeVirtualticketThirdCreateResult result &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            result &#x3D; bifrostSdkService.invoke(youzanTradeVirtualticketThirdCreate, new Token(accessToken), YouzanTradeVirtualticketThirdCreateResult.class);</span><br><span class="line">        &#125; catch (SDKException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(&quot;自定义电子卡券返回信息 &#123;&#125;&quot;,result.getMessage() + &quot; &quot; + result.getCode() +&quot; &quot;+ result.getSuccess());</span><br><span class="line">        createTicketResponseDTO.setSuccess(true);</span><br><span class="line">        return OutParamUtil.successResult(createTicketResponseDTO);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;生成卡券统一核销码</span><br><span class="line">    public String RandomCode() &#123;</span><br><span class="line">        Random random &#x3D; new Random();</span><br><span class="line">        String resultCode &#x3D; &quot;&quot;;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 21; i++) &#123;</span><br><span class="line">            resultCode +&#x3D; random.nextInt(10);</span><br><span class="line">        &#125;</span><br><span class="line">        return resultCode;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;生成券码信息</span><br><span class="line">    public List&lt;String&gt; RandomTicketNos()&#123;</span><br><span class="line">        List&lt;String&gt; TicketNos &#x3D; new ArrayList();</span><br><span class="line">        Random random &#x3D; new Random();</span><br><span class="line">        String  resultCode  &#x3D;&quot;&quot;;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 18; i++) &#123;</span><br><span class="line">            resultCode +&#x3D; random.nextInt(10);</span><br><span class="line">        &#125;</span><br><span class="line">        TicketNos.add(resultCode);</span><br><span class="line"></span><br><span class="line">        return TicketNos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上述代码中创建token 部分与你直接调用API接口所使用的Token 创建方式并不一样，需要特别注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建Token</span><br><span class="line">    OAuthToken token &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        token &#x3D; bifrostSdkService.getToken(&quot;43727705&quot;, OAuthEnum.TokenType.silent);</span><br><span class="line">    &#125; catch (SDKException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    String accessToken &#x3D; token.getAccessToken();</span><br><span class="line">    log.info(&quot;获取到的token &#123;&#125;&quot;,accessToken);</span><br></pre></td></tr></table></figure><h2 id="上传代码并发布"><a href="#上传代码并发布" class="headerlink" title="上传代码并发布"></a>上传代码并发布</h2><p>然后我们将实现好的业务代码push 到git仓库去，这样在开发环境下的业务配置-路由配置-交付-后端流程中，我们就可以看到我们实现的扩展点，我们将他开启</p><p><img src="https://file.awen.me/blog/20200418203110.png!awen" alt="20200418203110"></p><p>这里的业务标识，我们可以不用管，但是在实际的生产环境中如果你需要对特定类型的商品实现扩展点，那么你需要配置。</p><p>不过这里有个注意点创建电子卡券扩展点与下单中的电子卡券自定义交付扩展点会冲突，如果你开启了这个扩展点建议先关闭，否则可能看不到具体的效果</p><p><img src="https://file.awen.me/blog/20200418203917.png!awen" alt="20200418203917"></p><p>开启后，我们切换到应用管理-发布管理，我们点击发布，选择服务端，然后填写发布说明进行发布</p><p><img src="https://file.awen.me/blog/20200418203349.png!awen" alt="20200418203349"></p><p>最终发布的版本会在列表显示</p><p><img src="https://file.awen.me/blog/20200418203321.png!awen" alt="20200418203321"></p><p>接下来，我们可以在对应的授权测试店铺进行测试，如何判断店铺是否授权呢？我们在应用概况的店铺授权信息中点击新增/查看测试店铺就可以看到了，在这个店铺去创建一个电子卡券类型的商品，然后下单测试</p><p><img src="https://file.awen.me/blog/20200418203522.png!awen" alt="20200418203522"></p><p>当你创建完订单后会自动生成对应的电子卡券的卡券凭证，这里面就包括了券码和统一核销码</p><p><img src="https://file.awen.me/blog/054a161ef5c327b8dc81200b868594a.jpg!awen" alt="054a161ef5c327b8dc81200b868594a"></p><p>好了，以上就是整个扩展点的使用说明</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多用户在购买了有赞的微商城之后，在使用过程中发现有赞默认提供的标准化接口不能够满足自己的实际需求，事实上，不同的行业都会有一些自己行业的流程，比如说电子卡券，用户下单购买电子卡券，默认有赞这边会调用电子卡券创建接口生成卡券信息返回给用户，但是处于用户信息安全考虑这个卡券信
      
    
    </summary>
    
    
      <category term="有赞云" scheme="https://www.awen.me/categories/%E6%9C%89%E8%B5%9E%E4%BA%91/"/>
    
    
      <category term="有赞云" scheme="https://www.awen.me/tags/%E6%9C%89%E8%B5%9E%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合视图技术</title>
    <link href="https://www.awen.me/posts/a85f4b57.html"/>
    <id>https://www.awen.me/posts/a85f4b57.html</id>
    <published>2020-04-17T00:42:11.000Z</published>
    <updated>2021-02-26T06:05:29.266Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我们在pom.xml中添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>然后创建一个Book 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class Book &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String  author;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAuthor() &#123;</span><br><span class="line">        return author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAuthor(String author) &#123;</span><br><span class="line">        this.author &#x3D; author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Book&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, author&#x3D;&#39;&quot; + author + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个BookController 控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class BookController &#123;</span><br><span class="line">    @GetMapping(&quot;&#x2F;books&quot;)</span><br><span class="line">    public ModelAndView books()&#123;</span><br><span class="line">        List&lt;Book&gt; books &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        Book b1 &#x3D; new Book();</span><br><span class="line">        b1.setId(1);</span><br><span class="line">        b1.setAuthor(&quot;六承恩&quot;);</span><br><span class="line">        b1.setName(&quot;戏说不是胡说&quot;);</span><br><span class="line">        Book b2 &#x3D; new Book();</span><br><span class="line">        b2.setId(2);</span><br><span class="line">        b2.setAuthor(&quot;罗贯中&quot;);</span><br><span class="line">        b2.setName(&quot;三国演义&quot;);</span><br><span class="line">        books.add(b1);</span><br><span class="line">        books.add(b2);</span><br><span class="line">        ModelAndView mv &#x3D; new ModelAndView();</span><br><span class="line">        mv.addObject(&quot;books&quot;,books);</span><br><span class="line">        mv.setViewName(&quot;books&quot;);</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下里在resource 下的template 中新建一个books.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;图书列表&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;图书编号&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;图书名称&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;图书作者&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr th:each&#x3D;&quot;book:$&#123;books&#125;&quot;&gt;</span><br><span class="line">        &lt;td th:text&#x3D;&quot;$&#123;book.id&#125;&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td th:text&#x3D;&quot;$&#123;book.author&#125;&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td th:text&#x3D;&quot;$&#123;book.name&#125;&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在application.properties中添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.thymeleaf.cache&#x3D;false</span><br><span class="line">spring.thymeleaf.check-template&#x3D;true</span><br><span class="line">spring.thymeleaf.check-template-location&#x3D;true</span><br><span class="line">spring.thymeleaf.encoding&#x3D;utf-8</span><br><span class="line">spring.thymeleaf.prefix&#x3D;classpath:&#x2F;templates&#x2F;</span><br><span class="line">spring.thymeleaf.servlet.content-type&#x3D;text&#x2F;html</span><br><span class="line">spring.thymeleaf.suffix&#x3D;.html</span><br></pre></td></tr></table></figure><p>访问结果如下</p><p><img src="https://file.awen.me/blog/20200417084531.png!awen" alt="20200417084531"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，我们在pom.xml中添加如下内容&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.awen.me/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.awen.me/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot的入门</title>
    <link href="https://www.awen.me/posts/de40338d.html"/>
    <id>https://www.awen.me/posts/de40338d.html</id>
    <published>2020-04-16T02:29:33.000Z</published>
    <updated>2021-02-26T06:05:29.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我们为啥需要SpringBoot"><a href="#我们为啥需要SpringBoot" class="headerlink" title="我们为啥需要SpringBoot"></a>我们为啥需要SpringBoot</h2><p>任何先进技术的产生都不是凭空出现的，SpringBoot 也不例外，SpringBoot 是基于Spring 的基础上产生的。众所周知，Spring 是一个轻量级的容器，在Java EE 项目中得到广泛使用，但是Spring<br>其复杂、繁琐和臃肿的XML配置方式配置使得开发人员在实际使用过程中变得非常痛苦，尤其是与其他第三方工具进行整合时，比如Mybatis等就更会使得配置文件变得异常复杂和重复，比如我们来看一段Spring的配置<br><img src="https://file.awen.me/blog/20200416110856.png!awen" alt="20200416110856"></p><p>上图是一段配置数据库以及事务管理和Mybatis 的配置，我们发现仅仅是配置文件就非常的多，当然这还不是最复杂的。在这种基础上，SpringBoot 诞生了。</p><p>SpringBoot 的出现给开发者带来了新的自动化配置解决方案，使得开发者能够基于 SpringBoot 快速创建基于 Spring 生产级的独立应用程序， SpringBoot 中对一些常用的第三方库提供了默认的自动化配置方案，使得开发者只需要很少的 Spring 配置就能运行完整的 JavaEE 应用。由于其拥有了开箱即用的特性以及服务监控方案同时自带web服务器且与Spring的另一个主流的Spring Cloud 等服务治理框架以及kubernetes 等技术的融合使得开发人员可以快速的实现微服务以及服务的治理、熔断等，最重要的是你可以完全不需要配置XML，真的是太爽了。</p><p>那么，如何入门SpringBoot 呢？本文将带你了解</p><h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><p>首先，我们创建一个SpringBoot工程，创建SpringBoot的方法有很多，这里以IDEA 企业版为例，我们选择 Spring initalizr 然后创建一个工程<br><img src="https://file.awen.me/blog/20200416103230.png!awen" alt="20200416103230"></p><p>创建完工程之后，我们打开pom.xml，我们可以看到这段配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure><p>spring-boot-starter-parent 是一种特殊的 starter，它提供了一些 maven 默认配置 ，同时还提供了dependency-management ，可以便开发者在引入其他依赖时不必输入版本号，方便依赖管理。</p><p>SpringBoot 提供的starter 非常多，这些 Starter 要为第三方库提供自动配置，假如我们要配置一个web项目，则可以在maven 中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>在项目的入口我们可以看到一个DemoApplication，这是整个SpringBoot的入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class);</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中@SpringBootApplication 注解等于如下注解，表示开启自动配置以及自动扫包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan</span><br></pre></td></tr></table></figure><p>其中ComponentScan 会扫描@Service、@Repository、@Component、@Controller、@RestController以及带@Configuration 注解的类，但是我们为了更方便，通常都是直接在入口加上@SpringBootApplication</p><p>在IDE中，我们运行DemoApplication 这个class 就可以运行SpringBoot 了，此时终端会出现如下信息，我们可以看到 (v2.2.6.RELEASE) 版本号以及Tomcat的端口</p><p><img src="https://file.awen.me/blog/20200416104958.png!awen" alt="20200416104958"></p><p>但是此时我们去访问127.0.0.1:8080，会出现404的提醒<br><img src="https://file.awen.me/blog/20200416105456.png!awen" alt="20200416105456"><br>我们可以在项目下新建一个 HelloController</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @GetMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line"></span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return &quot;Hello World!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，我们去访问可以看到如下内容</p><p><img src="https://file.awen.me/blog/20200416105641.png!awen" alt="20200416105641"></p><p>当然，更多的时候我们写完一个应用，是需要放到服务器上去运行的，这个时候我们需要把应用进行打包，要打包应用，我们需要在pom.xml中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure><p>当然，使用idea 创建的SpringBoot 这些都给我们安排的妥妥的，我们只需要在终端输入如下命令就可以将整个项目进行打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><p><img src="https://file.awen.me/blog/20200416110020.png!awen" alt="20200416110020"></p><p>然后我们在终端执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target&#x2F;demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>就可以运行打包好的项目，如下所示</p><p><img src="https://file.awen.me/blog/20200416110200.png!awen" alt="20200416110200"></p><h2 id="定制Banner"><a href="#定制Banner" class="headerlink" title="定制Banner"></a>定制Banner</h2><p>当SpringBoot 程序启动之后，我们会看到SpringBoot 的Logo</p><p><img src="https://file.awen.me/blog/20200416185630.png!awen" alt="20200416185630"></p><p>但是通常情况下，企业会将其替换成自己的公司Logo，那么如何定制属于自己的企业Logo 呢？</p><p>首先，我们要把文件转成TXT文本形式的字体，比如在 <a href="http://www.network-science.de/ascii/" target="_blank" rel="noopener">http://www.network-science.de/ascii/</a> 设置，比如我们设置一个SpringDemo的字体</p><p><img src="https://file.awen.me/blog/20200416185837.png!awen" alt="20200416185837"></p><p>然后在项目的resource目录下新建一个banner.txt的文件，将生成的文字复制粘贴进去即可</p><p><img src="https://file.awen.me/blog/20200416185952.png!awen" alt="20200416185952"></p><p>然后我们重新运行程序就会发现默认的Logo 被替换了</p><p><img src="https://file.awen.me/blog/20200416190049.png!awen" alt="20200416190049"></p><p>如果要关闭也很简单，只需要在main函数中，设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplicationBuilder builder &#x3D; new SpringApplicationBuilder(DemoApplication.class);</span><br><span class="line">builder.bannerMode(Banner.Mode.OFF).run(args);</span><br></pre></td></tr></table></figure><h2 id="Web-容器的配置"><a href="#Web-容器的配置" class="headerlink" title="Web 容器的配置"></a>Web 容器的配置</h2><p>在SpringBoot 中，我们可以在application.properties 中对web 容器进行配置，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.address&#x3D;127.0.0.1 # 配置地址</span><br><span class="line">server.port&#x3D;8888 # 配置端口</span><br><span class="line">server.tomcat.basedir&#x3D;&#x2F;opt&#x2F;tmp # 配置目录</span><br><span class="line">server.tomcat.uri-encoding&#x3D;utf-8 #配置编码</span><br><span class="line">server.tomcat.max-threads&#x3D;300 #配置最大线程数</span><br></pre></td></tr></table></figure><p>在idea 中，会对配置项进行智能提示，非常方便</p><p><img src="https://file.awen.me/blog/20200416190414.png!awen" alt="20200416190414"></p><p>我们还可以在该文件中配置证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.ssl.key-store&#x3D; #配置秘钥文件名称</span><br><span class="line">server.ssl.key-alias&#x3D; #配置秘钥别名</span><br><span class="line">server.ssl.key-password&#x3D; # 配置证书密码</span><br></pre></td></tr></table></figure><h2 id="application-properties-的文件加载顺序"><a href="#application-properties-的文件加载顺序" class="headerlink" title="application.properties 的文件加载顺序"></a>application.properties 的文件加载顺序</h2><p>SpringBoot 中的application.properties配置文件可以出现在如下4个位置</p><ul><li>项目根目录下的config 文件夹中</li><li>项目的根目录下</li><li>classpath 下的config文件夹下</li><li>classpath 下</li></ul><p>开发者也可以自定义这个文件的名称，只需要在运行时加上spring.config.name=xxx即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -jar xxx.jar --spring.config.name&#x3D;xxx</span><br></pre></td></tr></table></figure><p>也可以知道配置文件所在路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -jar xxx.jar --spring.config.location&#x3D;classpath:&#x2F;</span><br></pre></td></tr></table></figure><p>SpringBoot 的配置文件最终都会被加载到Environment中，我们可以通过@Value 注解以及EnvironmentAware 接口来讲数据注入到属性上，例如application.properties中的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">book.name&#x3D;西游记</span><br><span class="line">book.author&#x3D;六承恩</span><br><span class="line">book.price&#x3D;66</span><br><span class="line">book.type&#x3D;&quot;古典文学&quot;,&quot;四大名著&quot;</span><br></pre></td></tr></table></figure><p>Book 类的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;book&quot;)</span><br><span class="line">public class Book &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String author;</span><br><span class="line">    private Float price;</span><br><span class="line">    private List&lt;String&gt; type;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;getter 省略</span><br><span class="line">    &#x2F;&#x2F;seteer 省略</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Book&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, author&#x3D;&#39;&quot; + author + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, price&#x3D;&quot; + price +</span><br><span class="line">                &quot;, type&#x3D;&quot; + type +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中ConfigurationProperties 注解中的prefix 属性描述了要加载配置文件的前缀对应的控制器类如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class BookController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    Book book;</span><br><span class="line">    @GetMapping(&quot;&#x2F;book&quot;)</span><br><span class="line">    public String book()&#123;</span><br><span class="line">        return book.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们执行后访问可以看到如下内容</p><p><img src="https://file.awen.me/blog/20200416200113.png!awen" alt="20200416200113"></p><p>除此之外，还支持YAML 配置,我们将application.properties中的内容删除或注释，然后在resource中新建一个application.yml 文件，内容如下，重新运行程序得到的结果与上面的一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">book:</span><br><span class="line">  name: 西游记</span><br><span class="line">  author: 六承恩</span><br><span class="line">  price: 66</span><br><span class="line">  type:</span><br><span class="line">    -  古典文学</span><br><span class="line">    - 四大名著</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">&gt; YAML格式的文件虽然方便，但是无法使用@PropertySource 注解加载YAML文件</span><br><span class="line"></span><br><span class="line">## Profile</span><br><span class="line"></span><br><span class="line">在实际的开发过程中，开发人员需要频繁的在生产和测试环境进行切换，其中一些配置就需要变动，比如数据库的配置。对此，SpringBoot 提供了@Profile注解</span><br><span class="line">我们可以配置2个配置文件分别代表生产和测试环境的,在resource中新建</span><br><span class="line">application-dev.properties以及application-prod.properties</span><br><span class="line"></span><br><span class="line">![20200416201414](https:&#x2F;&#x2F;file.awen.me&#x2F;blog&#x2F;20200416201414.png!awen)</span><br><span class="line"></span><br><span class="line">然后在main 函数中配置</span><br></pre></td></tr></table></figure><p>SpringApplicationBuilder builder = new SpringApplicationBuilder(DemoApplication.class);<br>    builder.application().setAdditionalProfiles(“prod”);<br>    builder.run(args);</p><pre><code>或者在项目启动时候加上`--spring.profiles.active=prod`</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;我们为啥需要SpringBoot&quot;&gt;&lt;a href=&quot;#我们为啥需要SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;我们为啥需要SpringBoot&quot;&gt;&lt;/a&gt;我们为啥需要SpringBoot&lt;/h2&gt;&lt;p&gt;任何先进技术的产生都不是凭空
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.awen.me/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.awen.me/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>整合Spring和Mybatis</title>
    <link href="https://www.awen.me/posts/4442599114.html"/>
    <id>https://www.awen.me/posts/4442599114.html</id>
    <published>2020-04-16T02:29:33.000Z</published>
    <updated>2021-02-26T06:05:29.340Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的开发过程中，我们经常需要使用Spring 和Mybatis，那么如何去整合Spring 与Mybatis 呢？本文我们一起来通过详细的案例的方式进行讲解</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，还是介绍下环境</p><ul><li>idea</li><li>mysql</li><li>maven</li></ul><p>我们先使用idea 创建一个maven工程，工程名称叫com.ssm，然后在pom.xml中加入以下jar包,可以看到所需要的jar包还是很多的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjrt&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.12&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.12&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.4&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.1&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.annotation&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsr250-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjrt&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.12&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-beans&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;aopalliance&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aopalliance&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.8.10&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-beans&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-aspects&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-beans&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-expression&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.ant&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ant&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.6&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.ant&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ant-launcher&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.6&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.ow2.asm&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;asm&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cglib&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cglib&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.javassist&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javassist&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.27.0-GA&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-dbcp2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.19&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.13.1&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.30&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.22&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit-jupiter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>然后我们编写配置文件，在mian-java 这个目录上点击右键创建一个文件夹，然后选择resource，然后在resource 下创建db.properties 文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.10.128:3306&#x2F;mybatis_db</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;123456</span><br><span class="line">jdbc.maxTotal&#x3D;30</span><br><span class="line">jdbc.maxIdle&#x3D;10</span><br><span class="line">jdbc.initialSize&#x3D;5</span><br></pre></td></tr></table></figure><p>其对应的数据库创建方式以及数据插入如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database mybatis_db;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use mybatis_db;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table t_user(</span><br><span class="line">    -&gt; id int(32) primary key auto_increment,</span><br><span class="line">    -&gt; username varchar(50),</span><br><span class="line">    -&gt; jobs varchar(50),</span><br><span class="line">    -&gt; phone varchar(16));</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t_user values(1,&quot;zhangsan&quot;,&quot;teacher&quot;,&quot;13142767333&quot;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t_user values(2,&quot;lisi&quot;,&quot;engineer&quot;,&quot;13142767334&quot;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t_user values(3,&quot;wangwu&quot;,&quot;pilot&quot;,&quot;12342767334&quot;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>然后还是在resource 目录下创建一个applicationContext.xml文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-4.3.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx-4.3.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-4.3.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop-4.3.xsd&quot;&gt;</span><br><span class="line">    &lt;!--读取db.properties--&gt;</span><br><span class="line">    &lt;context:property-placeholder location&#x3D;&quot;classpath:db.properties&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!--配置数据源 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot;</span><br><span class="line">          class&#x3D;&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;</span><br><span class="line">        &lt;!--数据库驱动 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--连接数据库的ur1 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--连接数据库的用户名 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--连接数据库的密码--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--最大连接数--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;maxTotal&quot; value&#x3D;&quot;$&#123;jdbc.maxTotal&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--最大空闲连接--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;maxIdle&quot; value&#x3D;&quot;$&#123;jdbc.maxIdle&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--初始化连接数--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;initialSize&quot; value&#x3D;&quot;$&#123;jdbc.initialSize&#125;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--事务管理器，依赖于数据源 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--注册事务管理器驱动，开启事务注解 --&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!--配置MyBatis工厂 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--注入数据源 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--指定核心配置文件位置 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">  &lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>这个配置文件中主要是定义了数据库的驱动以及连接池、事务管理器等，在最后配置了Mybatis 的工厂，制定其核心配置文件为mybatis-config.xml，并且使用typeAliases 创建一个别名，关于别名，你可以参考官网文档 <a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置别名 --&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;package name&#x3D;&quot;com.ssm&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;typeAliases&gt;  </span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><p>然后我们开始整合，我们先看下使用传统的DAO 方式如何整合，采用传统DAO 方式整合，我们需要编写DAO 接口以及实现类，并且需要向DAO实现类注入SqlSessionFactory，然后通过方法体通过SqlSessionFactory 创建SqlSession。具体怎么做呢？</p><p>首先，我们创建一个User.java 的用户类，并生成get和set方法以及tostring方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String jobs;</span><br><span class="line">    private String phone;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getJobs() &#123;</span><br><span class="line">        return jobs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPhone() &#123;</span><br><span class="line">        return phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username &#x3D; username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setJobs(String jobs) &#123;</span><br><span class="line">        this.jobs &#x3D; jobs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPhone(String phone) &#123;</span><br><span class="line">        this.phone &#x3D; phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, username&#x3D;&#39;&quot; + username + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, jobs&#x3D;&#39;&quot; + jobs + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, phone&#x3D;&#39;&quot; + phone + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们创建一个UserMappler.xml，编写一个根据用户id查询用户的select 语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;UserMapper&quot;&gt;</span><br><span class="line">    &lt;!--根据用户编号获取用户信息 --&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;findUserById&quot; parameterType&#x3D;&quot;Integer&quot; resultType&#x3D;&quot;User&quot;&gt;</span><br><span class="line">select * from t_user where id&#x3D;#&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>接着我们在Mybatis-config.xml中创建一个映射文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">      &lt;mapper resource&#x3D;&quot;UserMapper.xml&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><p>接着我们创建一个UserDao.java，我们创建一个findUserById 的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public User findUserById(Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要在applicationContext.xml 中定义一个bean，其id 为userDao,并指向clas路径，同时定义一个property，引用sqlSessionFactory，<br>其表示将sqlSessionFactory对象注入该bean 的实例化对象中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.ssm.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;sqlSessionFactory&quot; ref&#x3D;&quot;sqlSessionFactory&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>然后我们需要实现UserDao，我们创建一个UserDaoImpl.java文件，内如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm;</span><br><span class="line"></span><br><span class="line">import com.ssm.User;</span><br><span class="line">import com.ssm.UserDao;</span><br><span class="line">import org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public User findUserByID(Integer id) &#123;</span><br><span class="line">        return this.getSqlSession().selectOne(&quot;findUserById&quot;,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，我们创建一个测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm;</span><br><span class="line"></span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class DaoTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void findUserByIdTest()&#123;</span><br><span class="line">        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        UserDao userDao &#x3D; (UserDao) applicationContext.getBean(&quot;userDao&quot;);</span><br><span class="line">        User user &#x3D; userDao.findUserByID(1);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下</p><p><img src="https://file.awen.me/blog/20200412120832.png!awen" alt="20200412120832"></p><p>以上是使用传统Dao方式来进行整合，但是我们会发现采用这种方法实现整合会出现大量冗余代码，为此，我们可以使用Mybatis 提供的Mapper 接口进行实现</p><p>MapperFactoryBean 是Mybatis-Spring 提供的一个用于根据Mapper 接口生成Mapper 对象的类，这个类在Spring 配置时候可以配置一下参数</p><ul><li>mapperInterface 用于指定接口</li><li>SqlSessionFactory 用户指定 SqlSessionFactory</li><li>SqlSessionTemplate 用户指定 SqlSessionTemplate，如果与SqlSessionFactory同时设定，则只会启用SqlSessionTemplate</li></ul><p>了解了基本的配置后，我们就开始使用Mapper 接口的方式进行整合了</p><p>首先，我们创建一个UserMapper.java,内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm;</span><br><span class="line"></span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    public User findUserById(Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，创建一个UserMapper.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.ssm.UserMapper&quot;&gt;</span><br><span class="line">    &lt;!--根据用户编号获取用户信息 --&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;findUserById&quot; parameterType&#x3D;&quot;Integer&quot; resultType&#x3D;&quot;User&quot;&gt;</span><br><span class="line">select * from t_user where id&#x3D;#&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>仔细看你会发现和传统Dao 方式中我们定义接口其实一模一样，不过，接下来可就不一样了，我们需要在spring的配置文件中创建一个id为userMapper 的bean，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--     Mapper代理开发（基于MapperFactoryBean）--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;userMapper&quot; class&#x3D;&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;mapperInterface&quot; value&#x3D;&quot;com.ssm.UserMapper&quot; &#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;sqlSessionFactory&quot; ref&#x3D;&quot;sqlSessionFactory&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>这段配置是用来定义Mapper代理开发，也就是基于MapperFactoryBean的配置，然后我们在测试类中进行测试，你会发现我们并没有写UserMapper 的实现类UserMapperImpl,这是与传统DAO方式的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void findUserByIdMapperTest()&#123;</span><br><span class="line">       ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">       UserMapper userMapper &#x3D; (UserMapper) applicationContext.getBean(&quot;userMapper&quot;);</span><br><span class="line">       User user &#x3D; userMapper.findUserById(1);</span><br><span class="line">       System.out.println(user);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>执行代码</p><p><img src="https://file.awen.me/blog/20200412122058.png!awen" alt="20200412122058"></p><p>接下里我们看下给予MapperScannerConfigUre 的整合，在实际的开发过程中，Dao 层会包含很多的接口，如果我们每一个接口都要在Spring中配置对应的Bean，那么这个工作量是相当大的，因此mybatis-spring提供了一种自动扫描的兴衰来配置mybatis中的映射器，即可采用MapperScannerConfigure 类<br>只需要在spring配置文件中定义如下配置即可，我们将spring配置文件中的传统Dao 和基于MapperFactoryBean 的bean 注释掉，增加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;com.ssm&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>其中</p><ul><li>basePackage 是指定映射接口文件所在的包路径，如果你需要扫描多个包，需要加分号或逗号作为分隔符，它会扫描包内的所有文件</li></ul><p>然后我们再次执行对应的测试类，发现一样的效果。你会发现通过这样整合，这种是不是特别简单呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在实际的开发过程中，我们经常需要使用Spring 和Mybatis，那么如何去整合Spring 与Mybatis 呢？本文我们一起来通过详细的案例的方式进行讲解&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.awen.me/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.awen.me/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>使用Mybatis实现数据库的CURD操作</title>
    <link href="https://www.awen.me/posts/cc8ea2d9.html"/>
    <id>https://www.awen.me/posts/cc8ea2d9.html</id>
    <published>2020-04-07T22:45:42.000Z</published>
    <updated>2021-02-26T06:05:29.307Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p>在传统的JDBC 实现中，我们需要把查询过程写在java 类中，这样非常不便于后期维护，而使用Mybatis 则可以将查询语句配置在配置文件中，只需要维护好映射关系即可， 下面我们就来一起看雪如何去使用Mybatis吧。</p><h2 id="创建数据库并插入数据"><a href="#创建数据库并插入数据" class="headerlink" title="创建数据库并插入数据"></a>创建数据库并插入数据</h2><p>首先，我们创建一个mybatis_db 的数据库，然后创建一个表 t_user，在这个表中我们插入几条数据，如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database mybatis_db;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use mybatis_db;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table t_user(</span><br><span class="line">    -&gt; id int(32) primary key auto_increment,</span><br><span class="line">    -&gt; username varchar(50),</span><br><span class="line">    -&gt; jobs varchar(50),</span><br><span class="line">    -&gt; phone varchar(16));</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t_user values(1,&quot;zhangsan&quot;,&quot;teacher&quot;,&quot;13142767333&quot;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t_user values(2,&quot;lisi&quot;,&quot;engineer&quot;,&quot;13142767334&quot;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t_user values(3,&quot;wangwu&quot;,&quot;pilot&quot;,&quot;12342767334&quot;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h2 id="配置pom-xml-下载jar包"><a href="#配置pom-xml-下载jar包" class="headerlink" title="配置pom.xml 下载jar包"></a>配置pom.xml 下载jar包</h2><p>我们创建一个maven工程，并配置pom.xml 下载mybatis 和mysql-connect-java 的jar包，目前mybatis 的最新版本是3.5.4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.5.4&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;8.0.19&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>整个工程的目录如下</p><p><img src="https://file.awen.me/blog/20200408074929.png!awen" alt="20200408074929"></p><h2 id="配置mybatis-config"><a href="#配置mybatis-config" class="headerlink" title="配置mybatis-config"></a>配置mybatis-config</h2><p>接下来，我们在 idea 的resource 中创建一个mybatis-config.xml 的配置文件，内容如下，具体不需要过多解释就是配置JDBC相关的参数以及通过mappers 定义一个mybatis 的映射文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments default&#x3D;&quot;mysql&quot;&gt;</span><br><span class="line">        &lt;environment id&#x3D;&quot;mysql&quot;&gt;</span><br><span class="line">            &lt;transactionManager type&#x3D;&quot;JDBC&quot; &#x2F;&gt;</span><br><span class="line">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;192.168.10.128:3306&#x2F;mybatis_db&quot; &#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;123456&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;dataSource&gt;</span><br><span class="line">        &lt;&#x2F;environment&gt;</span><br><span class="line">    &lt;&#x2F;environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource&#x3D;&quot;UserMapper.xml&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="创建user类"><a href="#创建user类" class="headerlink" title="创建user类"></a>创建user类</h2><p>接下里我们创建对于的User类，并生成get和set以及toString 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.mybatis;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String jobs;</span><br><span class="line">    private String phone;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getJobs() &#123;</span><br><span class="line">        return jobs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPhone() &#123;</span><br><span class="line">        return phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username &#x3D; username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setJobs(String jobs) &#123;</span><br><span class="line">        this.jobs &#x3D; jobs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPhone(String phone) &#123;</span><br><span class="line">        this.phone &#x3D; phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, username&#x3D;&#39;&quot; + username + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, jobs&#x3D;&#39;&quot; + jobs + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, phone&#x3D;&#39;&quot; + phone + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h2><p><strong>配置UserMapper.xml</strong></p><p>接下里，我们创建映射文件UserMapper.xml 然后需要制定一个namespace就是 UserMapper，接着写一个select 语句，定义id和参数类型以及resultType，resultMap是指描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;UserMapper&quot;&gt;</span><br><span class="line">    &lt;!--根据用户编号获取用户信息 --&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;findUserById&quot; parameterType&#x3D;&quot;Integer&quot; resultType&#x3D;&quot;com.mybatis.User&quot;&gt;</span><br><span class="line">select * from t_user where id&#x3D;#&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>然后我们创建一个测试类，根据id来查询用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.mybatis;</span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Auth: xxxx</span><br><span class="line"> * @E-mail: xxx</span><br><span class="line"> * @title: MybatisTest</span><br><span class="line"> * @projectName: mybatis</span><br><span class="line"> * @description: TODO 描述信息</span><br><span class="line"> * @Date 2020&#x2F;4&#x2F;7 9:15 下午</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class MybatisTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void findUserByIdTest() throws Exception &#123;</span><br><span class="line">        String resource &#x3D; &quot;mybatis-config.xml&quot;;</span><br><span class="line">        InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span><br><span class="line">        User user &#x3D; sqlSession.selectOne(&quot;findUserById&quot;, 1);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们希望进行模糊查询，则在UserMapper.xml 中定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;findUserByName&quot; parameterType&#x3D;&quot;String&quot; resultType&#x3D;&quot;com.mybatisdemo.User&quot;&gt;</span><br><span class="line">        select * from t_user where username like concat(&#39;%&#39;,&#39;$&#123;value&#125;&#39;,&#39;%&#39;)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>然后在测试类中新建一个方法进行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">  public void findUserByNameTest() throws  Exception &#123;</span><br><span class="line">      String resource &#x3D; &quot;mybatis-config.xml&quot;;</span><br><span class="line">      InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);</span><br><span class="line">      SqlSessionFactory sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">      SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span><br><span class="line">      List&lt;User&gt; users &#x3D; sqlSession.selectList(&quot;findUserByName&quot;,&quot;g&quot;);</span><br><span class="line">      for (User user:users)&#123;</span><br><span class="line">          System.out.println(user.toString());</span><br><span class="line">      &#125;</span><br><span class="line">      sqlSession.close();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>如图所示</p><p><img src="https://file.awen.me/blog/2020-04-08-114937.png!awen" alt=""></p><p>接下来我们测试下添加新用户，首先我们在UserMapper.xml 中定义一个insert元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;addUser&quot; parameterType&#x3D;&quot;com.mybatisdemo.User&quot; &gt;</span><br><span class="line">       insert into t_user(username,jobs,phone) value (#&#123;username&#125;,#&#123;jobs&#125;,#&#123;phone&#125;)</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure><p>然后来写测试接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void addUser() throws Exception &#123;</span><br><span class="line">        String resource &#x3D; &quot;mybatis-config.xml&quot;;</span><br><span class="line">        InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setUsername(&quot;beiluo&quot;);</span><br><span class="line">        user.setJobs(&quot;DevOps&quot;);</span><br><span class="line">        user.setPhone(&quot;1314566666&quot;);</span><br><span class="line">        int rows &#x3D; sqlSession.insert(&quot;addUser&quot;,user);</span><br><span class="line">        if (rows &gt;0)&#123;</span><br><span class="line">            System.out.println(&quot;Success add &quot;+ rows +&quot;data！&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;add data fail!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如下所示</p><p><img src="https://file.awen.me/blog/2020-04-08-120254.png!awen" alt=""></p><p>接下来测试更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;update id&#x3D;&quot;updateUserInfo&quot; parameterType&#x3D;&quot;com.mybatisdemo.User&quot;&gt;</span><br><span class="line">        update t_user set username&#x3D;#&#123;username&#125;,jobs&#x3D;#&#123;jobs&#125;,phone&#x3D;#&#123;phone&#125; where id &#x3D;#&#123;id&#125;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure><p>然后写个测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"></span><br><span class="line">   public void updateUserinfo() throws  Exception &#123;</span><br><span class="line"></span><br><span class="line">       String resource &#x3D; &quot;mybatis-config.xml&quot;;</span><br><span class="line">       InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);</span><br><span class="line">       SqlSessionFactory sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">       SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span><br><span class="line">       User user &#x3D; new User();</span><br><span class="line">       user.setId(1);</span><br><span class="line">       user.setUsername(&quot;jike&quot;);</span><br><span class="line">       user.setJobs(&quot;qa&quot;);</span><br><span class="line">       user.setPhone(&quot;13142764432&quot;);</span><br><span class="line">       int rows &#x3D; sqlSession.update(&quot;updateUserInfo&quot;,user);</span><br><span class="line">       if (rows &gt;0)&#123;</span><br><span class="line">           System.out.println(&quot;Success update &quot;+ rows +&quot; data！&quot;);</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">           System.out.println(&quot;update data fail!&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       sqlSession.commit();</span><br><span class="line">       sqlSession.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>执行后如下所示</p><p><img src="https://file.awen.me/blog/2020-04-08-121018.png!awen" alt=""></p><p>最后，我们测试下删除功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;delete id&#x3D;&quot;deleteUser&quot; parameterType&#x3D;&quot;com.mybatisdemo.User&quot; &gt;</span><br><span class="line">        delete from t_user where id&#x3D;#&#123;id&#125;</span><br><span class="line">&lt;&#x2F;delete&gt;</span><br></pre></td></tr></table></figure><p>测试类如下</p><pre><code>@Test    public void deleteUser() throws Exception {        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession sqlSession = sqlSessionFactory.openSession();        int rows = sqlSession.delete(&quot;deleteUser&quot;,1);        if (rows &gt;0){            System.out.println(&quot;Success delete &quot;+ rows +&quot; data！&quot;);        }else{            System.out.println(&quot;delete data fail!&quot;);        }        sqlSession.commit();        sqlSession.close();    }</code></pre><p>执行结果如下</p><p><img src="https://file.awen.me/blog/20200408201759.png!awen" alt="20200408201759"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain O
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://www.awen.me/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.awen.me/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring 的事务管理</title>
    <link href="https://www.awen.me/posts/43b7240c.html"/>
    <id>https://www.awen.me/posts/43b7240c.html</id>
    <published>2020-04-06T09:19:18.000Z</published>
    <updated>2021-02-26T06:05:29.291Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们一起了解下Spring的数据库事务操作。在操作数据库时，我们经常会使用到事务，为此Spring 提供了专门的用于处理事务的API方便开发者调用，那么本文就着重来讲解下Spring 对于事务的相关功能</p><h2 id="Spring-事务的核心接口"><a href="#Spring-事务的核心接口" class="headerlink" title="Spring 事务的核心接口"></a>Spring 事务的核心接口</h2><p>Spring 通过一个名为spring-tx-4.3.6-RELEASE 的JAR包来管理事务，在这个JAR包中的org.Springframework.transaction 包中包含了三个接口文件:</p><ul><li>PlatformTramsactionManager 主要用于管理事务，包括获取事务的状态、提交事务和回滚事务；</li><li>TramsactionDefinition 该接口是事务定义的对象，包括了获取事务的名称、隔离级别、事务的传播行为、超时时间、事务是否只读等;</li><li>TramsactionStatus 该接口是事务的状态，描述了某一个时间点事务状态信息，包括刷新事务、获取是否存在保存点、是否是新事务、是否回滚、设置事务回滚</li></ul><h2 id="实例讲解"><a href="#实例讲解" class="headerlink" title="实例讲解"></a>实例讲解</h2><p>接下来我们将通过实例的方式来讲解如何使用注解的方式来通过Spring 进行事务的处理，手续我们在maven的pom.xml 中增加事务的JAR包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>我们首先准备一个数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;user&#96;(</span><br><span class="line">                &#96;id&#96; INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">                &#96;username&#96; VARCHAR(100) NOT NULL,</span><br><span class="line">                &#96;password&#96; VARCHAR(40) NOT NULL,</span><br><span class="line">                &#96;jifen&#96; int(10) NOT NULL,</span><br><span class="line">                PRIMARY KEY ( &#96;id&#96; ))ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><p>然后向数据库中写入一些数据，包括了用户名、密码和积分，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [spring_db]&gt; select * from user;</span><br><span class="line">+----+----------+----------+-------+</span><br><span class="line">| id | username | password | jifen |</span><br><span class="line">+----+----------+----------+-------+</span><br><span class="line">|  1 | zhangsan | 123      |  1000 |</span><br><span class="line">|  2 | lisi     | 1234     |  1000 |</span><br><span class="line">|  3 | wangwu   | 1234     |  1000 |</span><br><span class="line">+----+----------+----------+-------+</span><br><span class="line">3 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure><p>我们要做的事情就是把张三的积分转给李四</p><p>我们需要创建一个 User 类，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.SpringDemo;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private Integer jifen;</span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line">    public void  setJifen(Integer jifen)&#123;</span><br><span class="line">        this.jifen &#x3D; jifen;</span><br><span class="line">    &#125;</span><br><span class="line">    public Integer getjifen() &#123;</span><br><span class="line">        return jifen;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username &#x3D; username;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">    &#125;</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User [id&#x3D;&quot; + id + &quot;, username&#x3D;&quot; + username + &quot;, password&#x3D;&quot; + password + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个接口 UserDao</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.SpringDemo;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public int addUser(User user);</span><br><span class="line">    public int updateUser(User user);</span><br><span class="line">    public int deleteUser(int id);</span><br><span class="line">    &#x2F;&#x2F;通过id查询用户</span><br><span class="line">    public User findUserById(int id);</span><br><span class="line">    &#x2F;&#x2F;查询所有用户</span><br><span class="line">    public List&lt;User&gt; findAllUser();</span><br><span class="line">    public void transfer(String outUser,String inUser,Integer jifen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在UserDao 接口中我们定义了一个transfer 的方法，它包含了三个参数分别是outUser、inUser、jifen</p><p>接来下我们定义实现类 UserDAOImpl </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package com.SpringDemo;</span><br><span class="line"></span><br><span class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line">import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line">import org.springframework.jdbc.core.RowMapper;</span><br><span class="line">import org.springframework.transaction.annotation.Isolation;</span><br><span class="line">import org.springframework.transaction.annotation.Propagation;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line">    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) &#123;</span><br><span class="line">        this.jdbcTemplate &#x3D; jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int addUser(User user) &#123;</span><br><span class="line">        String sql&#x3D;&quot;insert into user(username,password) value(?,?)&quot;;</span><br><span class="line">        Object[] obj&#x3D;new Object[]&#123;</span><br><span class="line">                user.getUsername(),</span><br><span class="line">                user.getPassword()</span><br><span class="line">        &#125;;</span><br><span class="line">        int num&#x3D;this.jdbcTemplate.update(sql,obj);</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int updateUser(User user) &#123;</span><br><span class="line">        String sql&#x3D;&quot;update user set username&#x3D;?,password&#x3D;? where id&#x3D;?&quot;;</span><br><span class="line">        Object[] params&#x3D;new Object[]&#123;</span><br><span class="line">                user.getUsername(),</span><br><span class="line">                user.getPassword(),</span><br><span class="line">                user.getId()</span><br><span class="line">        &#125;;</span><br><span class="line">        int num&#x3D;this.jdbcTemplate.update(sql,params);</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int deleteUser(int id) &#123;</span><br><span class="line">        String sql&#x3D;&quot;delete from user where id&#x3D;?&quot;;</span><br><span class="line">        int num&#x3D;this.jdbcTemplate.update(sql,id);</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public User findUserById(int id) &#123;</span><br><span class="line">        String sql&#x3D;&quot;select * from user where id&#x3D;?&quot;;</span><br><span class="line">        RowMapper&lt;User&gt; rowMapper&#x3D;new BeanPropertyRowMapper&lt;User&gt;(User.class);</span><br><span class="line">        return this.jdbcTemplate.queryForObject(sql,rowMapper,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;User&gt; findAllUser() &#123;</span><br><span class="line">        String sql&#x3D;&quot;select * from user&quot;;</span><br><span class="line">        RowMapper&lt;User&gt; rowMapper&#x3D;new BeanPropertyRowMapper&lt;User&gt;(User.class);</span><br><span class="line">        return this.jdbcTemplate.query(sql,rowMapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">  </span><br><span class="line">    public void transfer(String outUser, String inUser, Integer jifen) &#123;</span><br><span class="line">        &#x2F;&#x2F; 赠送积分</span><br><span class="line">        this.jdbcTemplate.update(&quot;update  user set jifen&#x3D;jifen+? where username&#x3D;?&quot;,jifen,inUser);</span><br><span class="line">        &#x2F;&#x2F; 模拟系统运行时的突发性问题</span><br><span class="line">        int i &#x3D;1&#x2F;0;</span><br><span class="line">        &#x2F;&#x2F;赠送出积分</span><br><span class="line">        this.jdbcTemplate.update(&quot;update user set jifen&#x3D;jifen-? where username&#x3D;?&quot;,jifen,outUser);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们定义一个applicationContext.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-4.3.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx-4.3.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-4.3.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop-4.3.xsd&quot;&gt;</span><br><span class="line">&lt;!--1.配置数据源 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;dataSource&quot;</span><br><span class="line">      class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">    &lt;!--数据库驱动 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!--连接数据库的ur1 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;192.168.10.128:3306&#x2F;spring_db&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!--连接数据库的用户名 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!--连接数据库的密码 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;123456&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;!--2.配置JDBC模板 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;jdbcTemplate&quot; class&#x3D;&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">    &lt;!--默认必须使用数据源 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;!--3.定义id为userDao的Bean --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.SpringDemo.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;!--将 jdbcTemplate注入到 userDao实例中 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;jdbcTemplate&quot; ref&#x3D;&quot;jdbcTemplate&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;!--4.事务管理器，依赖于数据源 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;!--5.注册事务管理驱动 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:annotation-driven&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>Spring 的事务管理方式有2种，一种是传统的编程序事务管理，即通过代码来管理事务的开始、执行和异常以及回滚，一种是声明式管理，即通过配置文件的方式，原理是通过AOP技术实现，我们在实际开发过程中推荐使用声明式事务管理，效率会大大提升，因为只需要通过配置即可。</p><p>在该接口中我们我们重写transfer的方法，更新数据库将inUser 的积分进行增加，而对应的outUser 积分要进行减少，但是在这里我们要模拟系统运行的一些突然性问题。之后我们加了一个@Transactionl 注解，并设置了propagation、Isolation、readOnly 三个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> @Transactional(propagation &#x3D; Propagation.REQUIRED,isolation &#x3D; Isolation.DEFAULT,</span><br><span class="line">   readOnly &#x3D; false)</span><br><span class="line">   public void transfer(String outUser, String inUser, Integer jifen) &#123;</span><br><span class="line">       &#x2F;&#x2F; 赠送积分</span><br><span class="line">       this.jdbcTemplate.update(&quot;update  user set jifen&#x3D;jifen+? where username&#x3D;?&quot;,jifen,inUser);</span><br><span class="line">       &#x2F;&#x2F; 模拟系统运行时的突发性问题</span><br><span class="line">       int i &#x3D;1&#x2F;0;</span><br><span class="line">       &#x2F;&#x2F;赠送出积分</span><br><span class="line">       this.jdbcTemplate.update(&quot;update user set jifen&#x3D;jifen-? where username&#x3D;?&quot;,jifen,outUser);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>注解 @Transactional 的参数含义如下</p><table><thead><tr><th align="left">属性名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器。</td></tr><tr><td align="left">propagation</td><td align="left">事务的传播行为，默认值为 REQUIRED。</td></tr><tr><td align="left">isolation</td><td align="left">事务的隔离度也可以叫隔离级别，默认值采用 DEFAULT。</td></tr><tr><td align="left">timeout</td><td align="left">事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</td></tr><tr><td align="left">read-only</td><td align="left">指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。</td></tr><tr><td align="left">rollback-for</td><td align="left">用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。</td></tr><tr><td align="left">no-rollback- for</td><td align="left">抛出 no-rollback-for 指定的异常类型，不回滚事务。</td></tr></tbody></table><blockquote><p>@Transactional 注解也可以添加到类级别上。当把@Transactional 注解放在类级别时，表示所有该类的公共方法都配置相同的事务属性信息。</p></blockquote><p>isolcation 除了 DEFAULT，还有其他属性，我们可以在Isolation 这个类中看到相对于的定位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public enum Isolation &#123;</span><br><span class="line">    DEFAULT(-1),</span><br><span class="line">    READ_UNCOMMITTED(1),</span><br><span class="line">    READ_COMMITTED(2),</span><br><span class="line">    REPEATABLE_READ(4),</span><br><span class="line">    SERIALIZABLE(8);</span><br><span class="line"></span><br><span class="line">    private final int value;</span><br><span class="line"></span><br><span class="line">    private Isolation(int value) &#123;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int value() &#123;</span><br><span class="line">        return this.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Propagation 的属性如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public enum Propagation &#123;</span><br><span class="line">    REQUIRED(0),&#x2F;&#x2F;表示当前方法必须运行在一个事务环境中，如果存在就直接使用，否则开启一个新的事务执行该方法</span><br><span class="line">    SUPPORTS(1),&#x2F;&#x2F;如果当前方法处于事务环境中则使用，否则不使用事务</span><br><span class="line">    MANDATORY(2),&#x2F;&#x2F;表示该方法的线程必须在事务中否则抛出异常</span><br><span class="line">    REQUIRES_NEW(3), &#x2F;&#x2F;要求在新事务中执行，如果已经在事务中了则先暂停然后启动新事务执行，如果不在则启动一个新事务后执行</span><br><span class="line">    NOT_SUPPORTED(4), &#x2F;&#x2F;不支持当前事务，总是以非事务状态执行，如果调用该方法的线程处于事务中泽先暂停然后执行</span><br><span class="line">    NEVER(5), &#x2F;&#x2F;不支持当前执行的方法在事务中，如果在抛出异常</span><br><span class="line">    NESTED(6); &#x2F;&#x2F;即便当前执行的方法在事务中也会启动一个新事务，然后执行该方法</span><br><span class="line"></span><br><span class="line">    private final int value;</span><br><span class="line"></span><br><span class="line">    private Propagation(int value) &#123;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int value() &#123;</span><br><span class="line">        return this.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外使用@Transactional 必须保证是在public 级别的方法中使用，@Transactional 只能应用到 public 方法才有效，这是因为在使用 Spring AOP 代理时，Spring 在调用 TransactionInterceptor 在目标方法执行前后进行拦截之前，DynamicAdvisedInterceptor（CglibAopProxy 的内部类）的的 intercept 方法或 JdkDynamicAopProxy 的 invoke 方法会间接调用 AbstractFallbackTransactionAttributeSource（Spring 通过这个类获取 @Transactional 注解的事务属性配置属性信息）的 computeTransactionAttribute 方法。</p><p>接下来我们创建一个测试类来进行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.SpringDemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class TransactionTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext applicationContext &#x3D;</span><br><span class="line">                new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        UserDao userDao &#x3D; (UserDao) applicationContext.getBean(&quot;userDao&quot;);</span><br><span class="line">        userDao.transfer(&quot;zhangsan&quot;,&quot;lisi&quot;,100);</span><br><span class="line">        System.out.println(&quot;赠送积分成功&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们执行上述程序，可以发现报错了,程序报</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ArithmeticException: &#x2F; by zero</span><br></pre></td></tr></table></figure><p>如图所示</p><p><img src="https://file.awen.me/blog/20200406211030.png!awen" alt="20200406211030"></p><p>此时，我们查看数据库中的数据没有发生任何变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [spring_db]&gt; select * from user;</span><br><span class="line">+----+----------+----------+-------+</span><br><span class="line">| id | username | password | jifen |</span><br><span class="line">+----+----------+----------+-------+</span><br><span class="line">|  1 | zhangsan | 123      |  1000 |</span><br><span class="line">|  2 | lisi     | 1234     |  1000 |</span><br><span class="line">|  3 | wangwu   | 1234     |  1000 |</span><br><span class="line">+----+----------+----------+-------+</span><br><span class="line">3 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure><p>而当我们把 int i =1/0; 注释掉再次执行就会发现程序执行没有报错了，并且数据发生了变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [spring_db]&gt; select * from user;</span><br><span class="line">+----+----------+----------+-------+</span><br><span class="line">| id | username | password | jifen |</span><br><span class="line">+----+----------+----------+-------+</span><br><span class="line">|  1 | zhangsan | 123      |   900 |</span><br><span class="line">|  2 | lisi     | 1234     |  1100 |</span><br><span class="line">|  3 | wangwu   | 1234     |  1000 |</span><br><span class="line">+----+----------+----------+-------+</span><br><span class="line">3 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure><p>好了，以上就是关于Spring的事务管理介绍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们一起了解下Spring的数据库事务操作。在操作数据库时，我们经常会使用到事务，为此Spring 提供了专门的用于处理事务的API方便开发者调用，那么本文就着重来讲解下Spring 对于事务的相关功能&lt;/p&gt;
&lt;h2 id=&quot;Spring-事务的核心接口&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://www.awen.me/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.awen.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>入职第一周</title>
    <link href="https://www.awen.me/posts/9932abc7.html"/>
    <id>https://www.awen.me/posts/9932abc7.html</id>
    <published>2020-04-05T13:22:31.000Z</published>
    <updated>2021-02-26T06:05:29.313Z</updated>
    
    <content type="html"><![CDATA[<p>本周二开始入职有赞，周三请了一天假回网易办离职，朋友都说我这个操作特别的骚气，我也觉得，以前可没干过，主要还是因为有赞那边说只有周二和周四回办理入职的手续。</p><p>进入有赞什么感受呢:</p><ul><li>以我们组来说，都很年轻化，我在组里已经算不得小鲜肉了。</li><li>有赞的入职培训还是很正规的，哪怕是在网易也没有说入职第一天就安排各种IT培训之类的，这种都说到了工位自己去摸索或请教同事。</li><li>签的是电子合同，没有纸质合同。</li><li>这2天做的最多的事情就是自我介绍。不过我觉得这个是个好事情，互相认识方便开展工作。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本周二开始入职有赞，周三请了一天假回网易办离职，朋友都说我这个操作特别的骚气，我也觉得，以前可没干过，主要还是因为有赞那边说只有周二和周四回办理入职的手续。&lt;/p&gt;
&lt;p&gt;进入有赞什么感受呢:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以我们组来说，都很年轻化，我在组里已经算不得小鲜肉了。
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>自用电脑转Windows平台</title>
    <link href="https://www.awen.me/posts/8a984de1.html"/>
    <id>https://www.awen.me/posts/8a984de1.html</id>
    <published>2020-04-05T13:20:59.000Z</published>
    <updated>2021-02-26T06:05:29.355Z</updated>
    
    <content type="html"><![CDATA[<p>不得不说 macbook 是一件很保值的产品，我16年入手的港版15款MacBook，购买的时候是8000多 今天被我4000块钱卖了，配置是i5 8g 256ssd 本来是打算走爱回收卖掉的，但是爱回收在京东的入口加上券才给3500，对比下选择了线下电脑城一个老板回收了。</p><p>其实我觉得电脑这玩意就是一个工具，我没有什么信仰，对于我来说是mac 还是 Windows 其实都一样，以前买这台mac 是因为上上家公司购买 macbook 办公有补贴，所以就买了，用了4年，算下来也是不亏的。于是开开心心的卖了。因为这台mac 在我录制视频剪辑的时候会很卡，正好现在的公司又给配了一台2019款的mac，所以我这台mac其实就可以下岗了。如果闲置着越往后越贬值了不如趁着还值几个钱卖了搞个台式机还可以用个六七年不成问题</p><p>卖了之后直接就在老板那配个Windows台式机扔家里，其实自从微软推出了Windows 10 我感觉 Windows 也是越来越好用了，而 mac 主要胜在系统的流畅性以及item2等工具非常适合开发，但是 Windows 其实也可以，比如我现在使用vscode +hexo+git+markdown 写文档，写完直接 vscode 一键提交，完全不用切换窗口。毕竟不论是 mac 还是Windows 都只是个工具而已。</p><p>因此，卖掉后我直接自己装了一台Windows 台式机，本来是打算选择京东自营的，但是从京东看整套配件价格在6280,如下所示</p><table><thead><tr><th>配件</th><th>型号</th><th>京东价格</th></tr></thead><tbody><tr><td>cpu</td><td>AMD 锐龙7 3700X 处理器 (r7)7nm 8核16线程 3.6GHz 65W AM4接口 盒装CPU</td><td>2249</td></tr><tr><td>主板</td><td>微星（MSI）B450M MORTAR MAX迫击炮 电竞电脑主板 支持3700X/3600X/3600/2600 CPU（AMD B450/Socket AM4）</td><td>739</td></tr><tr><td>内存</td><td>金士顿(Kingston) DDR4 3200 16GB(8G×2)套装 台式机内存条 骇客神条 Fury雷电系列</td><td>689</td></tr><tr><td>ssd 硬盘</td><td>三星（SAMSUNG）250GB SSD固态硬盘 M.2接口(NVMe协议) 970 EVO Plus（MZ-V7S250B）</td><td>529</td></tr><tr><td>显卡</td><td>影驰 GTX1660Super/GTX1660TI 6G GDDR6 台式电脑游戏显卡 GTX1660Super大将6G 高频版</td><td>1599</td></tr><tr><td>机箱</td><td>先马（SAMA）黑洞7 中塔主动静音台式电脑主机箱 支持ATX主板/宽体五金/标配3风扇4面静音棉/背线/独立电源仓</td><td>209</td></tr><tr><td>电源</td><td>长城（GreatWall）额定500W HOPE-6000DS 电源 （70cm超长背板走线/三年质保/台系电容/12cm静音风扇/宽幅）</td><td>249</td></tr><tr><td>总价</td><td></td><td>6263</td></tr></tbody></table><p>结果我发现线下配还便宜200多，但是可能是因为我比较懂硬件的配置，没有被坑，今天跟我在一个地方装机的女生，是个主播，我就看到老板给他写的配置，那真的是给小白写的。CPU 就直接写I5，具体是几代不提的，所以如果你不懂配置，不建议去逛电脑城，老板最喜欢的就是这种，他会把一些难卖的产品或者对于他来说有赚头的产品卖给你而不是你想要的产品。</p><p>很多人会说京东买的售后会好些，其实我觉得线下线上都一样。另外我觉得很多人喜欢用鲁大师跑分，手机也跑分，我觉得真的没必要在乎这些。这玩意骗骗小白而已，真把他当回事就有点过了，其实现在不管你怎么配，只要硬件是新款的性能都说完全够用的，除非你是发烧友或者是专业级的用来处理视频渲染，当然都会搞这个了肯定多多少少对硬件有一定了解了。小白而言其实主流配置就可以。最多一套5000完全够用了。</p><p>这台电脑我给他定的使用年限是6年。</p><p>测试下磁盘速度如下，还是可以的，我也不怎么玩游戏其实250G对于我来说够用了</p><p><img src="https://file.awen.me/blog/20200407082238.png!awen" alt="20200407082238"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不得不说 macbook 是一件很保值的产品，我16年入手的港版15款MacBook，购买的时候是8000多 今天被我4000块钱卖了，配置是i5 8g 256ssd 本来是打算走爱回收卖掉的，但是爱回收在京东的入口加上券才给3500，对比下选择了线下电脑城一个老板回收了。
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://www.awen.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.awen.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Spring JDBC 来实现增删改查</title>
    <link href="https://www.awen.me/posts/8a984ee7.html"/>
    <id>https://www.awen.me/posts/8a984ee7.html</id>
    <published>2020-03-29T12:36:23.000Z</published>
    <updated>2021-02-26T06:05:29.324Z</updated>
    
    <content type="html"><![CDATA[<p>Spring框架针对数据库提供了JdbcTemplate 类，JdbcTemplate 是Spring 数据抽象层的基础，其他更高层次的抽象类都是构建在其基础之上，JdbcTemplate 是Spring JDBC的核心类。JdbcTemplate 继承自抽象类JdbcAccessor，同时实现了JdbcOperations 接口，JdbcTemplate定义在了JdbcTemplate类中从而可以使用增删改查来对数据库进行操作。JdbcTemplate 的直接父类是JdbcAccessor，它提供了一些访问数据库时所需要使用的公共属性，包括DataSource以及SQLExceptionTranslator 等。前者用于获取数据库连接以及引入对数据库连接的缓冲池以及分布式事务等支出。后者是对SQLException 进行转译工作。</p><h1 id="Spring-JDBC的配置"><a href="#Spring-JDBC的配置" class="headerlink" title="Spring JDBC的配置"></a>Spring JDBC的配置</h1><p>Spring JDBC 模块主要包括core、dataSource、object、support四个包</p><ul><li>core 包括JDBC的核心功能，例如JdbcTemplate类、simpleJdbcInsert类、simpleJdbcCall 类以及NamedParameterJdbcTemplate类。</li><li>dataSource 包括了访问数据库的实用工具类。</li><li>object 以OOP的方式访问数据库，它允许执行查询操作并将返回结果作为业务对象，可以在数据表和业务对象的属性直接映射查询关系。</li><li>support 包括core 和object包的支持类，例如提供一些SQLException类。</li></ul><p>我们了解了这些模块的功能，接来下我们看看怎么去配置JDBC，请看下面的xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-4.3.xsd&quot;&gt;</span><br><span class="line">    &lt;!--1配置数据源 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot;</span><br><span class="line">          class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;!--数据库驱动 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--连接数据库的ur1 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;spring_db&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--连接数据库的用户名 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--连接数据库的密码 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--2配置JDBC模板 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;jdbcTemplate&quot; class&#x3D;&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">        &lt;!--默认必须使用数据源 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>在上述xml 文件中的<code>beans</code> 中定义了三个<code>bean</code>，分别是dataSource、jdbcTemplate。</p><p>其中dataSource中的4个属性分别对应的是</p><ul><li><p>driverClassName，它是数据库的驱动</p></li><li><p>url 数据库的访问地址</p></li><li><p>username  数据库的用户名</p></li><li><p>password 数据库的密码</p></li></ul><p>在使用传统的JDBC操作数据库时，这些参数我们也是要配置的。</p><p>下面我们通过实例的方式来讲解如何通过JDBC来对数据库进行操作，我们需要进行以下准备工作</p><p>1.配置maven的pom.xml  下载所需要的jar包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;mysql&#x2F;mysql-connector-java --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.19&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>2.需要有一个可以反问的数据库，比如我的数据库设置密码为root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password root</span><br></pre></td></tr></table></figure><p>3.创建一个spring_db 的表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; create database spring_db;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br></pre></td></tr></table></figure><ol start="4"><li>在idea 工程中新建一个com.ssm.jdbc 的包，并在该包中创建一个JdbcTempTest的测试类，首先我们加载xml 配置，配置文件就是上面的xml配置文件，我们创建一个数据表为user_table，使用jdbctemp.execute(String s) 方法执行SQL语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void TestJdbcTemplate() &#123;</span><br><span class="line">      &#x2F;&#x2F;加载配置</span><br><span class="line">      ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;jdbc.xml&quot;);</span><br><span class="line">      &#x2F;&#x2F;获取JdbcTemplate实例</span><br><span class="line">      JdbcTemplate jdbctemp &#x3D; (JdbcTemplate) applicationContext.getBean(&quot;jdbcTemplate&quot;);</span><br><span class="line">      jdbctemp.execute(&quot;create table user_table(&quot; +</span><br><span class="line">              &quot;id int primary key auto_increment,&quot; +</span><br><span class="line">              &quot;username varchar(80),&quot; +</span><br><span class="line">              &quot;password varchar(40))&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>进入数据库，我们可以看到该表已经被创建出来了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use spring_db;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [spring_db]&gt; show tables;</span><br><span class="line">+---------------------+</span><br><span class="line">| Tables_in_spring_db |</span><br><span class="line">+---------------------+</span><br><span class="line">| user_table          |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.000 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [spring_db]&gt;</span><br></pre></td></tr></table></figure><p>下面，我们通过jdbc 来实现增删改查操作，首先，我们要创建一个类，名字为User，这个User 类中包含了用户的id、用户名和密码信息，并设置其set和get属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm.jdbc;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username &#x3D; username;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">    &#125;</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User [id&#x3D;&quot; + id + &quot;, username&#x3D;&quot; + username + &quot;, password&#x3D;&quot; + password + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们创建一个UserDao 接口，该接口定义了添加、更新、删除、根据ID查询和查询所有用户的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm.jdbc;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public int addUser(User user);</span><br><span class="line">    public int updateUser(User user);</span><br><span class="line">    public int deleteUser(int id);</span><br><span class="line">    &#x2F;&#x2F;通过id查询用户</span><br><span class="line">    public User findUserById(int id);</span><br><span class="line">    &#x2F;&#x2F;查询所有用户</span><br><span class="line">    public List&lt;User&gt; findAllUser();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们来对UserDao的接口进行实现，在这个方法中我们对具体的增删改查逻辑进行设置，直接看代码吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm.jdbc;</span><br><span class="line"></span><br><span class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line">import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line">import org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line">    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) &#123;</span><br><span class="line">        this.jdbcTemplate &#x3D; jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int addUser(User user) &#123;</span><br><span class="line">        String sql&#x3D;&quot;insert into user_table(username,password) value(?,?)&quot;;</span><br><span class="line">        Object[] obj&#x3D;new Object[]&#123;</span><br><span class="line">                user.getUsername(),</span><br><span class="line">                user.getPassword()</span><br><span class="line">        &#125;;</span><br><span class="line">        int num&#x3D;this.jdbcTemplate.update(sql,obj);</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int updateUser(User user) &#123;</span><br><span class="line">        String sql&#x3D;&quot;update user_table set username&#x3D;?,password&#x3D;? where id&#x3D;?&quot;;</span><br><span class="line">        Object[] params&#x3D;new Object[]&#123;</span><br><span class="line">                user.getUsername(),</span><br><span class="line">                user.getPassword(),</span><br><span class="line">                user.getId()</span><br><span class="line">        &#125;;</span><br><span class="line">        int num&#x3D;this.jdbcTemplate.update(sql,params);</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int deleteUser(int id) &#123;</span><br><span class="line">        String sql&#x3D;&quot;delete from user_table where id&#x3D;?&quot;;</span><br><span class="line">        int num&#x3D;this.jdbcTemplate.update(sql,id);</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public User findUserById(int id) &#123;</span><br><span class="line">        String sql&#x3D;&quot;select * from user_table where id&#x3D;?&quot;;</span><br><span class="line">        RowMapper&lt;User&gt; rowMapper&#x3D;new BeanPropertyRowMapper&lt;User&gt;(User.class);</span><br><span class="line">        return this.jdbcTemplate.queryForObject(sql,rowMapper,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;User&gt; findAllUser() &#123;</span><br><span class="line">        String sql&#x3D;&quot;select * from user_table&quot;;</span><br><span class="line">        RowMapper&lt;User&gt; rowMapper&#x3D;new BeanPropertyRowMapper&lt;User&gt;(User.class);</span><br><span class="line">        return this.jdbcTemplate.query(sql,rowMapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们在jdbc.xml 中加入bean，加入UserDao</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义id为userDao的Bean --&gt;</span><br><span class="line">   &lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.ssm.jdbc.UserDaoImpl&quot;&gt;</span><br><span class="line">       &lt;!--将 jdbcTemplate注入到 userDao实例中 --&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;jdbcTemplate&quot; ref&#x3D;&quot;jdbcTemplate&quot; &#x2F;&gt;</span><br><span class="line">   &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>好了，一切准备就绪，我们接来下通过测试类来测试下具体的增删改查。</p><p>首先来测试下添加用户方法，如图下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void addUserTest()&#123;</span><br><span class="line">       &#x2F;&#x2F;加载jdbc.xml 配置文件</span><br><span class="line">       ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;jdbc.xml&quot;);</span><br><span class="line">       &#x2F;&#x2F;获取UserDao实例</span><br><span class="line">       UserDao userDao &#x3D; (UserDao) applicationContext.getBean(&quot;userDao&quot;);</span><br><span class="line">       &#x2F;&#x2F;创建user实例</span><br><span class="line">       User user &#x3D; new User();</span><br><span class="line">       &#x2F;&#x2F;设置属性</span><br><span class="line">       user.setUsername(&quot;张三&quot;);</span><br><span class="line">       user.setPassword(&quot;123&quot;);</span><br><span class="line">       &#x2F;&#x2F;添加用户</span><br><span class="line">       int num &#x3D; userDao.addUser(user);</span><br><span class="line">       if (num &gt; 0) &#123;</span><br><span class="line">           System.out.println(&quot;Success insert &quot;+num+&quot; data&quot;);</span><br><span class="line">       &#125;else &#123;</span><br><span class="line">           System.out.println(&quot;erro&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>更新用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void updateUserTest()&#123;</span><br><span class="line">       &#x2F;&#x2F;加载jdbc.xml 配置文件</span><br><span class="line">       ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;jdbc.xml&quot;);</span><br><span class="line">       &#x2F;&#x2F;获取UserDao实例</span><br><span class="line">       UserDao userDao &#x3D; (UserDao) applicationContext.getBean(&quot;userDao&quot;);</span><br><span class="line">       &#x2F;&#x2F;创建user实例</span><br><span class="line">       User user &#x3D; new User();</span><br><span class="line">       &#x2F;&#x2F;设置属性</span><br><span class="line">       user.setId(1);</span><br><span class="line">       user.setUsername(&quot;李四&quot;);</span><br><span class="line">       user.setPassword(&quot;12345&quot;);</span><br><span class="line">       &#x2F;&#x2F;更新用户信息</span><br><span class="line">       int num &#x3D; userDao.updateUser(user);</span><br><span class="line">       if (num &gt; 0) &#123;</span><br><span class="line">           System.out.println(&quot;Success update &quot;+num+&quot; data&quot;);</span><br><span class="line">       &#125;else &#123;</span><br><span class="line">           System.out.println(&quot;erro&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void delUserTest()&#123;</span><br><span class="line">       &#x2F;&#x2F;加载jdbc.xml 配置文件</span><br><span class="line">       ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;jdbc.xml&quot;);</span><br><span class="line">       &#x2F;&#x2F;获取UserDao实例</span><br><span class="line">       UserDao userDao &#x3D; (UserDao) applicationContext.getBean(&quot;userDao&quot;);</span><br><span class="line">       &#x2F;&#x2F;删除，传入ID值</span><br><span class="line">       int num &#x3D; userDao.deleteUser(1);</span><br><span class="line">       if (num &gt; 0) &#123;</span><br><span class="line">           System.out.println(&quot;Success delete &quot;+num+&quot; data&quot;);</span><br><span class="line">       &#125;else &#123;</span><br><span class="line">           System.out.println(&quot;erro&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>查询用户信息，包括了根据ID查询和查询所有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void findUserTest()&#123;</span><br><span class="line">    &#x2F;&#x2F;加载jdbc.xml 配置文件</span><br><span class="line">    ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;jdbc.xml&quot;);</span><br><span class="line">    &#x2F;&#x2F;获取UserDao实例</span><br><span class="line">    UserDao userDao &#x3D; (UserDao) applicationContext.getBean(&quot;userDao&quot;);</span><br><span class="line">    &#x2F;&#x2F;根据ID查询用户</span><br><span class="line">    User user &#x3D; userDao.findUserById(2);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void findAllUserTest()&#123;</span><br><span class="line">    &#x2F;&#x2F;加载jdbc.xml 配置文件</span><br><span class="line">    ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;jdbc.xml&quot;);</span><br><span class="line">    &#x2F;&#x2F;获取UserDao实例</span><br><span class="line">    UserDao userDao &#x3D; (UserDao) applicationContext.getBean(&quot;userDao&quot;);</span><br><span class="line">    &#x2F;&#x2F;根据ID查询用户</span><br><span class="line">    List&lt;User&gt; list &#x3D;  userDao.findAllUser();</span><br><span class="line">    for (User user:list)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring框架针对数据库提供了JdbcTemplate 类，JdbcTemplate 是Spring 数据抽象层的基础，其他更高层次的抽象类都是构建在其基础之上，JdbcTemplate 是Spring JDBC的核心类。JdbcTemplate 继承自抽象类JdbcAc
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://www.awen.me/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.awen.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>游良渚遗址公园记</title>
    <link href="https://www.awen.me/posts/b6749da7.html"/>
    <id>https://www.awen.me/posts/b6749da7.html</id>
    <published>2020-03-28T13:17:31.000Z</published>
    <updated>2021-02-26T06:05:29.346Z</updated>
    
    <content type="html"><![CDATA[<p>良渚遗址公园位于浙江省杭州市瓶窑镇，良渚文化距今5000多年，大约公元前3400年 – 公元前2250年，属于中国新石器时代。</p><p><img src="https://file.awen.me/blog/2020-03-28-131251.jpg!awen" alt=""></p><p>1936年被首次发现，在反山王墓中发现了几千件精美的玉器，含有璧、琮、钺、璜、冠形器、三叉形玉器、玉镯、玉管、玉珠、玉坠、柱形玉器、锥形玉器、玉带及环等，其中在反山12号墓出土的玉琮，是新石器时代良渚文化的玉琮之首，故称“玉琮王”，据《周礼·春官·大宗伯》记载：“以苍璧礼天、黄琮礼地。” 琮是用来祭祀地神的，具有通灵的功能。</p><p>随后在几代人考古学家的发掘探索下发现了良渚古城遗址。包括城墙、宫殿、水利系统等，也就是说在五千年以前良渚这个地方就已经孕育出了一个国家。当时的水坝遗址鉴定比传说中的大禹治水故事的通认年代还早数百年至千年。这种水利系统很可能是距今为止最早的水利工程，良渚先民们通过草裹泥来砌大坝治理水。</p><p>2019年良渚申遗成功，至此良渚文化已经成为世界历史中绕不过去的话题。</p><p>趁着疫情期间公园免费参观，在寒风之中我和老婆一起过去参观一番，虽然是疫情而且还下着小雨，但是游园的人还是蛮多的，进了公园后，如果不了解良渚的历史，你可能会发现这个公园真的没那么的好玩，因为进去之后需要凭借你的想象力来还原良渚先民们是如何在这里生活和工作的。</p><p><img src="https://file.awen.me/blog/2020-03-28-133238.jpg!awen" alt=""></p><p>去年在把房子买在了良渚，距离遗址公园也蛮近的，等房子交付后可以没事就进来晃晃，现在这个季节公园里面的油菜花开的还不错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;良渚遗址公园位于浙江省杭州市瓶窑镇，良渚文化距今5000多年，大约公元前3400年 – 公元前2250年，属于中国新石器时代。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://file.awen.me/blog/2020-03-28-131251.jpg!awen&quot; al
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://www.awen.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.awen.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP 基于注解的声明式AspectJ详解</title>
    <link href="https://www.awen.me/posts/966df44c.html"/>
    <id>https://www.awen.me/posts/966df44c.html</id>
    <published>2020-03-28T02:40:18.000Z</published>
    <updated>2021-02-26T06:05:29.265Z</updated>
    
    <content type="html"><![CDATA[<p>在 Spring 中 AOP 是一个非常非常重要的概念，那么什么是AOP呢？</p><p>AOP 即面向切面编程，也可以叫做面向方向编程，AOP不是一个新东西，它是OOP，即面向对象编程的一种补充，在当前已经成为一种成熟的编程方式。</p><h2 id="为啥要使用-AOP"><a href="#为啥要使用-AOP" class="headerlink" title="为啥要使用 AOP"></a>为啥要使用 AOP</h2><p>在学习AOP 之前，我们先了解下为啥我们要使用AOP？</p><p>那么，在传统的业务处理代码中，比如你要操作数据库，会进行事务的处理或者打印一些日志。虽然通过OOP 也可以实现，比如通过继承或组合的方式来达到代码的复用，但是如果实现某些功能，比如日志记录，相同的代码会分散到各个方法中，如果后面要想关闭某个功能或进行修改就必须要修改所有的方法，非常的不方便。</p><p>那么为了解决为了解决这个问题，AOP的思想随之产生。它采取了<strong>横向抽取机制</strong>。将分散在各个方法中的重复代码提取出来，然后在程序编译或运行时，再将这些提取出来的代码应用到需要执行的地方。这种采用横向提取机制的方式。是采用传统的AOP方式下无法办到的。因为传统的面向对象思想只能实现父子关系的纵向重用。</p><p>在AOP思想中，通过aspect(切面)可以分别在不同的类的方法中加入，例如事务日志权限和异常处理等功能。</p><p>使用切面这种横向方式。能够使开发人员在编写业务逻辑时专注于核心业务逻辑，而不用过度的关注与其他业务逻辑的实现。这样可以提高开发效率，同时还增强了代码的可维护性。</p><p>目前主流的AOP 框架有2个，分别是spring aop 和aspectJ，前者是纯Java 实现的，不需要专门的编译过程和类加载器，在运行期间可以通过代理的方式向目标内植入增强的代码。而AspectJ是一个基于Java语言的AOP框架。在Spring 2.0 开始，引入了对AspectJ 的支持，并提供了一个专门的编译器在编译时提供横向代码的植入。</p><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><p>在了解AOP之前，首先要了解一下它的专业术语。这些术语包括Aspect、Joinpiont、Pointcut、Advice、Target Object、Proxy 和Weaving，对于这些专业术语具体的解释如下：</p><ul><li>Aspect，切面在实际的应用中，切面通常是指封装的用于横向插入系统功能，比如事务日志的类，该类被spring容器识别为切面，需要在配置文件中通过&lt;bean&gt;来指定。</li><li>Joinpiont，连接点，在程序执行过程中的某个阶段点。它实际上是对象的一个操作，例如方法的调用或异常的抛出。在spring AOP中连接点就是指方法的调用。</li><li>Pointcut，切入点，切入点是指切面与程序流程的交叉点，即那些需要处理的连接点，通常在程序中切入点是指。类或者是方法名，比如说某个通知要应用到所有的以add开头的方法中。那么所有满足这一规则的方法都是切入点。</li><li>Adivce，通知增强处理，AOP 框架在特定的切入点执行增强处理，即在定义好的切入点处理所需要执行的程序代码，你可以理解其为切面类中的方法，它是切面的具体实现。</li><li>Target Object ，目标对象，是指所有通知的对象。也称为北增强对象。如果AOP框架采用的是动态的AOP实现，那么该对象就是一个被代理对象。</li><li>Proxy ，代理，将通知应用到目标对象之后被动态创建的对象。</li><li>Weaving， 织入，将切面代码插入目标对象上，从而生成代理对象的过程。</li></ul><h2 id="AspectJ-开发"><a href="#AspectJ-开发" class="headerlink" title="AspectJ 开发"></a>AspectJ 开发</h2><p>使用AspectJ 实现AOP 的方式有</p><ul><li>XML 声明</li><li>注解</li></ul><p><strong>XML 声明</strong></p><p>这种方式是通过XML文件来定义切面、切入点以及通知等，所有的切面、切入点和通知都必须定义在<code>&lt;aop:config&gt;</code> 元素中，在<code>&lt;beans&gt;</code>元素中可以包含多个<code>&lt;aop:config&gt;</code> 元素，一个<code>&lt;aop:config&gt;</code> 中又可以包含子元素和属性，其子元素包含<code>&lt;aop:pointcut</code>、<code>&lt;aop:advisor</code>、<code>&lt;aop:aspect&gt;</code>，在配置时，需要严格按照顺序来定义，在<code>&lt;aop:aspect&gt;</code> 下，同样包含属性和多个子元素，通过使用<code>&lt;aop:aspect&gt;</code>元素以及其子元素 可以在XML中配置切面、切入点和通知。如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-4.3.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop-4.3.xsd&quot;&gt;</span><br><span class="line">    &lt;!-- 1 目标类 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.ssm.aspectj.UserDaoImpl&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 2 切面 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;myAspect&quot; class&#x3D;&quot;com.ssm.aspectj.xml.MyAspect&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 3 aop编程 --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!-- 1.配置切面 --&gt;</span><br><span class="line">        &lt;aop:aspect id&#x3D;&quot;aspect&quot; ref&#x3D;&quot;myAspect&quot;&gt;</span><br><span class="line">            &lt;!-- 2.配置切入点 --&gt;</span><br><span class="line">            &lt;aop:pointcut expression&#x3D;&quot;execution(* com.ssm.aspectj.*.*(..))&quot;id&#x3D;&quot;myPointCut&quot; &#x2F;&gt;</span><br><span class="line">            &lt;!-- 3.配置通知 --&gt;</span><br><span class="line">            &lt;!-- 前置通知 --&gt;</span><br><span class="line">            &lt;aop:before method&#x3D;&quot;myBefore&quot; pointcut-ref&#x3D;&quot;myPointCut&quot; &#x2F;&gt;</span><br><span class="line">            &lt;!--后置通知--&gt;</span><br><span class="line">            &lt;aop:after-returning method&#x3D;&quot;myAfterReturning&quot; pointcut-ref&#x3D;&quot;myPointCut&quot; returning&#x3D;&quot;returnVal&quot;&#x2F;&gt;</span><br><span class="line">            &lt;!--环绕通知 --&gt;</span><br><span class="line">            &lt;aop:around method&#x3D;&quot;myAround&quot; pointcut-ref&#x3D;&quot;myPointCut&quot; &#x2F;&gt;</span><br><span class="line">            &lt;!--异常通知 --&gt;</span><br><span class="line">            &lt;aop:after-throwing method&#x3D;&quot;myAfterThrowing&quot; pointcut-ref&#x3D;&quot;myPointCut&quot; throwing&#x3D;&quot;e&quot; &#x2F;&gt;</span><br><span class="line">            &lt;!--最终通知 --&gt;</span><br><span class="line">            &lt;aop:after method&#x3D;&quot;myAfter&quot; pointcut-ref&#x3D;&quot;myPointCut&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>但是 XML 的配置过于复杂，因为日常开发过程中，我们更倾向于使用注解的方式来进行AOP的开发</p><p>为了在应用中使用@AspectJ支持，Spring需要添加三个库：</p><ul><li>aspectjweaver.jar</li><li>aspectjrt.jar</li><li>aopalliance.jar</li></ul><p>因此，我们需要配置maven，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;aspectjrt&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.6.12&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.6.12&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>新建一个app.xml ，我们需要在Spring配置文件中做如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-4.3.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop-4.3.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-4.3.xsd&quot;&gt;</span><br><span class="line">    &lt;!-- 指定需要扫描的包，使注解生效 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.ssm.aspectj&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 启动基于注解的声明式AspectJ支持 --&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>然后，我们创建一个UserDao 的接口，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm.aspectj;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    &#x2F;&#x2F; add user</span><br><span class="line">    public void addUser();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;delete user</span><br><span class="line">    public void delUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 UserDao 实例化，并加上注解@Repository(“userDao”)，方便后续进行调用具体的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm.aspectj;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">@Repository(&quot;userDao&quot;)</span><br><span class="line">public class UserDaoImpl implements UserDao&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addUser() &#123;</span><br><span class="line">        System.out.println(&quot;add user&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void delUser() &#123;</span><br><span class="line">        System.out.println(&quot;delete user&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个切面类，在该类中编写各种通知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm.aspectj.xml;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.After;</span><br><span class="line">import org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line">import org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 切面类，在此类中编写通知</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line">    &#x2F;&#x2F;定义切入点表达式</span><br><span class="line">    @Pointcut(&quot;execution(* com.ssm.aspectj.*.*(..))&quot;)</span><br><span class="line">    &#x2F;&#x2F;使用一个返回值为void、方法体为空的方法来命名切入点</span><br><span class="line">    private void myPointCut()&#123;&#125;</span><br><span class="line">    &#x2F;&#x2F;前置通知</span><br><span class="line">    @Before(&quot;myPointCut()&quot;)</span><br><span class="line">    public void myBefore(JoinPoint joinPoint)&#123;</span><br><span class="line">        System.out.print(&quot;前置通知：模拟执行权限检查..，&quot;);</span><br><span class="line">        System.out.print(&quot;目标类是：&quot;+joinPoint.getTarget());</span><br><span class="line">        System.out.println(&quot;，被植入增强处理的目标方法为：&quot;+joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;后置通知</span><br><span class="line">    @AfterReturning(value&#x3D;&quot;myPointCut()&quot;)</span><br><span class="line">    public void myAfterReturning(JoinPoint joinPoint) &#123;</span><br><span class="line">        System.out.print(&quot;后置通知：模拟记录日志..，&quot;);</span><br><span class="line">        System.out.println(&quot;被植入增强处理的目标方法为：&quot; + joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 环绕通知</span><br><span class="line">     * ProceedingJoinPoint是JoinPoint的子接口，表示可执行目标方法</span><br><span class="line">     * 1.必须是Object类型的返回值</span><br><span class="line">     * 2.必须接收一个参数，类型为ProceedingJoinPoint</span><br><span class="line">     * 3.必须throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Around(&quot;myPointCut()&quot;)</span><br><span class="line">    public Object myAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable&#123;</span><br><span class="line">        &#x2F;&#x2F;开始</span><br><span class="line">        System.out.println(&quot;环绕开始：执行目标方法之前，模拟开启事务..，&quot;);</span><br><span class="line">        &#x2F;&#x2F;执行当前目标方法</span><br><span class="line">        Object obj&#x3D;proceedingJoinPoint.proceed();</span><br><span class="line">        &#x2F;&#x2F;结束</span><br><span class="line">        System.out.println(&quot;环绕结束：执行目标方法之后，模拟关闭事务..，&quot;);</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;异常通知</span><br><span class="line">    @AfterThrowing(value&#x3D;&quot;myPointCut()&quot;,throwing&#x3D;&quot;e&quot;)</span><br><span class="line">    public void myAfterThrowing(JoinPoint joinPoint,Throwable e)&#123;</span><br><span class="line">        System.out.println(&quot;异常通知：出错了&quot;+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;最终通知</span><br><span class="line">    @After(&quot;myPointCut()&quot;)</span><br><span class="line">    public void myAfter()&#123;</span><br><span class="line">        System.out.println(&quot;最终通知：模拟方法结束后释放资源..&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>srping 的通知包括五种通知工作：</p><table><thead><tr><th align="left">通知</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">前置通知</td><td align="left">在一个方法执行之前，执行通知。</td></tr><tr><td align="left">后置通知</td><td align="left">在一个方法执行之后，不考虑其结果，执行通知。</td></tr><tr><td align="left">返回后通知</td><td align="left">在一个方法执行之后，只有在方法成功完成时，才能执行通知。</td></tr><tr><td align="left">抛出异常后通知</td><td align="left">在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</td></tr><tr><td align="left">环绕通知</td><td align="left">在建议方法调用之前和之后，执行通知。</td></tr></tbody></table><p>在上述代码中，其中 @Pointcut(“execution(* com.ssm.aspectj.<em>.</em>(..))”) 表示定义切入点，使用注解@Pointcut 后面的execution(* com.ssm.aspectj.<em>.</em>(..)) 表示匹配所有目标类的所有方法。 第一个<em>代表返回类型，第二个</em>代表方法名，而..代表任意入参的方法，他的格式如下</p><blockquote><p>语法：execution(修饰符 返回值 包.类.方法(参数) throws 异常)</p></blockquote><p>最后编写个测试类从ClassPathXmlApplicationContext 读取xml 文件，然后调用getBean 获取userDao并执行addUser方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm.aspectj;</span><br><span class="line"></span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class TestXmlAspectJ &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testAnnotation() &#123;</span><br><span class="line">        ApplicationContext applicationContext&#x3D;new ClassPathXmlApplicationContext(&quot;app.xml&quot;);</span><br><span class="line">        &#x2F;&#x2F;从容器中获得内容</span><br><span class="line">        UserDao userDao&#x3D; (UserDao) applicationContext.getBean(&quot;userDao&quot;);</span><br><span class="line">        &#x2F;&#x2F;执行方法</span><br><span class="line">        userDao.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://file.awen.me/blog/2020-03-28-023623.png!awen" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Spring 中 AOP 是一个非常非常重要的概念，那么什么是AOP呢？&lt;/p&gt;
&lt;p&gt;AOP 即面向切面编程，也可以叫做面向方向编程，AOP不是一个新东西，它是OOP，即面向对象编程的一种补充，在当前已经成为一种成熟的编程方式。&lt;/p&gt;
&lt;h2 id=&quot;为啥要使用-A
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://www.awen.me/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.awen.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring 自动注解</title>
    <link href="https://www.awen.me/posts/b38fa135.html"/>
    <id>https://www.awen.me/posts/b38fa135.html</id>
    <published>2020-03-27T09:45:13.000Z</published>
    <updated>2021-02-26T06:05:29.265Z</updated>
    
    <content type="html"><![CDATA[<p>在Spring 中除了可以通过XML 来进行装备，还可以使用注解，Spring 提供了对annotation (注解)的全面支持</p><p>常用的注解有</p><p><strong>声明bean的注解</strong></p><ul><li><p>@Component 组件，没有明确的角色</p></li><li><p>@Service 在业务逻辑层使用（service层）</p></li><li><p>@Repository 在数据访问层使用（dao层）</p></li><li><p>@Controller 在展现层使用，控制器的声明（C）</p></li></ul><p><strong>注入bean的注解</strong></p><ul><li><p>@Autowired：由Spring提供</p></li><li><p>@Inject：由JSR-330提供</p></li><li><p>@Resource：由JSR-250提供</p></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>首先，创建一个userDao</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.springdemo;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建userDao 的实现类UserDaoImpl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.springdemo;</span><br><span class="line"></span><br><span class="line">import com.springdemo.UserDao;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">@Repository(&quot;userDao&quot;)</span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void save() &#123;</span><br><span class="line">        System.out.println(&quot;userDao.save&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建userService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.springdemo;</span><br><span class="line"></span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    public void save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建userService 的实现类UserServiceImpl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.springdemo;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Service(&quot;userService&quot;)</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Resource(name &#x3D; &quot;userDao&quot;)</span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    @Override</span><br><span class="line">    public void save() &#123;</span><br><span class="line">        this.userDao.save();</span><br><span class="line">        System.out.println(&quot;userService.save()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserController</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.springdemo;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line">@Controller(&quot;UserController&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Resource(name&#x3D;&quot;userService&quot;)</span><br><span class="line"></span><br><span class="line">    private UserService userService;</span><br><span class="line">    public void save()&#123;</span><br><span class="line">        this.userService.save();</span><br><span class="line">        System.out.println(&quot;运行userController.save()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Resource 如果报错，需要在pom.xml 中添加javax.annotation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.annotation&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jsr250-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>创建一个beans.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-4.3.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-4.3.xsd&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    xmlns 即 xml namespace xml 使用的命名空间</span><br><span class="line">    xmlns:xsi 即 xml schema instance xml 遵守的具体规范</span><br><span class="line">    xsi:schemaLocation 本文档 xml 遵守的规范 官方指定</span><br><span class="line">    --&gt;</span><br><span class="line">   &lt;--使用context命名空间在配置文件中开启相应的注解处理器--&gt;</span><br><span class="line">    &lt;context:annotation-config &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.springdemo.UserDaoImpl&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.springdemo.UserServiceImpl&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;userController&quot; class&#x3D;&quot;com.springdemo.UserController&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果context 报错，确认beans 中的xmlns和xsi 信息是否正确</p></blockquote><p>创建AnnotationAssembleTest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.springdemo;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class AnnotationAssembleTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        UserController userController &#x3D; (UserController) applicationContext.getBean(&quot;userController&quot;);</span><br><span class="line">        userController.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userDao.save</span><br><span class="line">userService.save()</span><br><span class="line">运行userController.save()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Spring 中除了可以通过XML 来进行装备，还可以使用注解，Spring 提供了对annotation (注解)的全面支持&lt;/p&gt;
&lt;p&gt;常用的注解有&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;声明bean的注解&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;@Compone
      
    
    </summary>
    
    
      <category term="GitHub" scheme="https://www.awen.me/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="https://www.awen.me/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean 的作用域</title>
    <link href="https://www.awen.me/posts/b38fa134.html"/>
    <id>https://www.awen.me/posts/b38fa134.html</id>
    <published>2020-03-27T08:45:13.000Z</published>
    <updated>2021-02-26T06:05:29.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Bean-的作用域"><a href="#Spring-Bean-的作用域" class="headerlink" title="Spring Bean 的作用域"></a>Spring Bean 的作用域</h1><p>spring bean 的作用域有如下几种：</p><ul><li>singleton  在Spring 中仅存在一个Bean 实例，默认不配置就是这种方式。</li><li>prototype  每次都会创建一个新的实例</li><li>reques 每次HTTP请求会创建一个新的Bean，仅限webApplicationContext</li><li>session 同一个 HTTP Session 共享一个Bean，不同的Session 使用不同的Bean，仅限webApplicationContext</li><li>globalSession，通常用于Portlet 应用环境，限于 webApplicationContext</li></ul><p>以上五种作用域中，request、session和global session三种作用域仅在基于web的应用中使用（不必关心你所采用的是什么web应用框架），只能用在基于web的Spring ApplicationContext环境。</p><p>下面简单介绍下2种</p><h3 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h3><p>当一个bean的作用域为Singleton，那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。</p><p>applicationContext.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-4.3.xsd&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    xmlns 即 xml namespace xml 使用的命名空间</span><br><span class="line">    xmlns:xsi 即 xml schema instance xml 遵守的具体规范</span><br><span class="line">    xsi:schemaLocation 本文档 xml 遵守的规范 官方指定</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;!--bean 默认的scope 是singleton--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;scope&quot; class&#x3D;&quot;com.springdemo.Scope&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>ScopeTest.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.springdemo;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class ScopeTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 两次输出结果一致，因为默认的作用域是 singleton，singleton 定义的bean 在spring 容器中将只有一个实例，无论有多少个bean引用都始终指向同一个对象</span><br><span class="line">         *</span><br><span class="line">         * com.springdemo.Scope@75c072cb</span><br><span class="line">         * com.springdemo.Scope@75c072cb</span><br><span class="line">         *&#x2F;</span><br><span class="line">        </span><br><span class="line">        System.out.println(applicationContext.getBean(&quot;scope&quot;));</span><br><span class="line">        System.out.println(applicationContext.getBean(&quot;scope&quot;));</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>使用scope 指定作用域为 prototype</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;scope&quot; class&#x3D;&quot;com.springdemo.Scope&quot; scope&#x3D;&quot;prototype&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>当一个bean的作用域为Prototype，表示一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。</p><p>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.springdemo;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class ScopeTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 对于需要保持会话状态的Bean，应用使用prototype 作用域，spring会为每个请求都创建一个新实例</span><br><span class="line">         *</span><br><span class="line">         * com.springdemo.Scope@341b80b2</span><br><span class="line">         * com.springdemo.Scope@55a1c291</span><br><span class="line">         *&#x2F;</span><br><span class="line"></span><br><span class="line">        System.out.println(applicationContext.getBean(&quot;scope&quot;));</span><br><span class="line">        System.out.println(applicationContext.getBean(&quot;scope&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Bean-的作用域&quot;&gt;&lt;a href=&quot;#Spring-Bean-的作用域&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean 的作用域&quot;&gt;&lt;/a&gt;Spring Bean 的作用域&lt;/h1&gt;&lt;p&gt;spring bean 的作
      
    
    </summary>
    
    
      <category term="GitHub" scheme="https://www.awen.me/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="https://www.awen.me/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github Actions自动部署Hexo</title>
    <link href="https://www.awen.me/posts/b38fa124.html"/>
    <id>https://www.awen.me/posts/b38fa124.html</id>
    <published>2020-03-27T05:42:13.000Z</published>
    <updated>2021-02-26T06:05:29.247Z</updated>
    
    <content type="html"><![CDATA[<p>话说每次写文章都需要执行 hexo g -d，如果换个机器想记录点东西还得备一套nodejs 环境，着实麻烦，最近发现Github Actions 非常好用，只需要写完文章，将markdown文件丢到GitHub 去就可以自动触发编译，整个过程非常的快，下面将介绍如何去使用</p><p><img src="https://file.awen.me/blog/2020-03-27-060833.png!awen" alt=""></p><h2 id="准备2个仓库"><a href="#准备2个仓库" class="headerlink" title="准备2个仓库"></a>准备2个仓库</h2><p>首先需要准备2个仓库，</p><ul><li>一个是你博客托管在GitHub的公共仓库用来提供博客的访问服务</li><li>一个是私有仓库用来上传hexo源码</li></ul><p>比如我的公共仓库就是 awen.github.io 而私有仓库你自己取名字，我这里叫 deploy_blog，然后把本地的hexo 环境中的文件全部上传到私有仓库去</p><h2 id="创建私钥"><a href="#创建私钥" class="headerlink" title="创建私钥"></a>创建私钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f ~&#x2F;.ssh&#x2F;github-actions-deploy</span><br></pre></td></tr></table></figure><p>在Settings-&gt;SSH and GPG keys添加刚刚生成的公钥，名称随意。 </p><p><img src="https://file.awen.me/blog/2020-03-27-061357.png!awen" alt=""></p><p>在私有仓库的Settings-&gt;Secrets里添加刚刚生成的私钥，名称为 ACTION_DEPLOY_KEY。</p><p><img src="https://file.awen.me/blog/2020-03-27-061519.png!awen" alt=""></p><h2 id="配置hexo-的-config-yml"><a href="#配置hexo-的-config-yml" class="headerlink" title="配置hexo 的  config.yml"></a>配置hexo 的  config.yml</h2><p>在hexo 的站点配置文件下的deploy 中配置repo 为你博客公共仓库的git地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repo: git@github.com:monkey-wenjun&#x2F;awen.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><h2 id="配置-workflows"><a href="#配置-workflows" class="headerlink" title="配置 workflows"></a>配置 workflows</h2><p>在私有仓库的Actions选项卡下点击新建workflow，编写如下配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">name: Deploy Blog</span><br><span class="line"></span><br><span class="line">on: [push] # 当有新push时运行</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build: # 一项叫做build的任务</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行</span><br><span class="line">    </span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout # 将仓库内master分支的内容下载到工作目录</span><br><span class="line">      uses: actions&#x2F;checkout@v1 # 脚本来自 https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;checkout</span><br><span class="line">      </span><br><span class="line">    - name: Use Node.js 12.x # 配置Node环境</span><br><span class="line">      uses: actions&#x2F;setup-node@v1 # 配置脚本来自 https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;setup-node</span><br><span class="line">      with:</span><br><span class="line">        node-version: &quot;12.x&quot;</span><br><span class="line">    </span><br><span class="line">    - name: Setup Hexo env</span><br><span class="line">      env:</span><br><span class="line">        ACTION_DEPLOY_KEY: $&#123;&#123; secrets.ACTION_DEPLOY_KEY &#125;&#125;</span><br><span class="line">      run: |</span><br><span class="line">        # set up private key for deploy</span><br><span class="line">        mkdir -p ~&#x2F;.ssh&#x2F;</span><br><span class="line">        echo &quot;$ACTION_DEPLOY_KEY&quot; | tr -d &#39;\r&#39; &gt; ~&#x2F;.ssh&#x2F;id_rsa # 配置秘钥</span><br><span class="line">        chmod 600 ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">        ssh-keyscan github.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts</span><br><span class="line">        # set git infomation</span><br><span class="line">        git config --global user.name &#39;monkey-wenjun&#39; # 换成你自己名字</span><br><span class="line">        git config --global user.email &#39;xxxxx&#39; # 换成你的邮箱</span><br><span class="line">        # install dependencies</span><br><span class="line">        npm i -g hexo-cli # 安装hexo</span><br><span class="line">        npm i</span><br><span class="line">  </span><br><span class="line">    - name: Deploy</span><br><span class="line">      run: |</span><br><span class="line">        # publish</span><br><span class="line">        hexo generate &amp;&amp; hexo deploy # 执行部署程序</span><br></pre></td></tr></table></figure><p>你也可以在本地的.github 目录下新建一个workflows 目录，在里面新建一个yml 文件内容如上，然后将文件push 到github 上去就会自动触发编译了。</p><p>编译过程中如果有错误，在GitHub的actions 中可以看到一个叉，发布成功的是一个绿色的勾</p><p><img src="https://file.awen.me/blog/2020-03-27-062018.png!awen" alt=""></p><p>发布失败的可以点进去看下是哪一个步骤出错了，然后对应的修改即可，比如我这里是deploy 这步错了</p><p><img src="https://file.awen.me/blog/2020-03-27-062120.png!awen" alt=""></p><p>点击展开，可以看到，根据报错调整你的workflows 文件即可</p><p><img src="https://file.awen.me/blog/2020-03-27-062218.png!awen" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;话说每次写文章都需要执行 hexo g -d，如果换个机器想记录点东西还得备一套nodejs 环境，着实麻烦，最近发现Github Actions 非常好用，只需要写完文章，将markdown文件丢到GitHub 去就可以自动触发编译，整个过程非常的快，下面将介绍如何去使用
      
    
    </summary>
    
    
      <category term="GitHub" scheme="https://www.awen.me/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="https://www.awen.me/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Spring 如何入门</title>
    <link href="https://www.awen.me/posts/f63ef5c2.html"/>
    <id>https://www.awen.me/posts/f63ef5c2.html</id>
    <published>2020-03-27T01:20:19.000Z</published>
    <updated>2021-02-26T06:05:29.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-入门"><a href="#Spring-入门" class="headerlink" title="Spring 入门"></a>Spring 入门</h1><p>现在很多企业级的项目都是基于 spring 框架开发的，而这两年很火的微服务概念就有基于 springboot springcloud 等框架，spring 框架解决企业应用的复杂性和耦合性，对于一个Java 程序员来说，要想学习 springboot 和 springcloud，掌握 spring 的基础用法是一件必须做的事情。那么本文就带领大家一起来理解下 spring 的基本概念以及通过一些案例来快速配置 spring，从而理解 spring 的 IoC 和 DI 概念。</p><p><strong>学习 Springboot 和 Springcloud 要不要跳过 spring？我的建议是不要，应该先学习 spring 和 spring mvc，然后进阶去学习 Spring其他框架，会更便于你理解。</strong></p><h2 id="什么是-spring"><a href="#什么是-spring" class="headerlink" title="什么是 spring"></a>什么是 spring</h2><p>Spring 是一个以 IoC （英文 Inversion of Control,控制反转)和 AOP(Aspect Oriented Programming)为内核的框架，那么啥是 IoC？AOP 又是个什么鬼？</p><p><strong>什么是 IoC</strong></p><p>IoC 是 spring 的基础，通过 IoC 可以实现控制，在学 Java 基础的时候我们知道调用 new 关键词来构造一个方法创建对象，而在 Spring 中创建对象就是用 IoC。spring 中的 IoC 方式对象的生命周期管理由Spring 框架提供的 IoC 容器来管理，我们可以直接从 IoC 容器中获取对象，控制权从应用程序交给了 IoC 容器。</p><p><strong>什么是 DI</strong></p><p>而 DI（Dependency  Inject，依赖注入)与 IoC 其实含义是一样的，DI 就是对象的属性，已经被注入好相关的 value，直接使用即可。所谓的依赖注入就是由IoC 容器在运行期间动态的将某种依赖关系注入到对象之中。</p><p><strong>什么是 AOP</strong></p><p>而AOP 是面向切面编程，它是通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术，AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。</p><p>我相信你对于上面的话每一个字你都能看懂，但是连在一起你就不知道是什么意思了，没关系，我们继续往下看。</p><p>在我们学习 Java 面向对象的时候，我们都知道，如果你写的代码出现重复了可以将重复的代码做如下操作：</p><ul><li>抽取成方法</li><li>抽取类</li></ul><p>抽取成类的方式我们称之为<strong>纵向抽取</strong>，我们可以通过继承的方式实现纵向抽取。但是在负载的业务场景下即使抽取成类还是会出现重复的代码，因为一些逻辑(开始、结束、提交事务)依附在我们业务类的方法逻辑中！</p><p>而AOP的理念则是将<strong>分散在各个业务逻辑代码中相同的代码通过横向切割的方式</strong>抽取到一个独立的模块中！</p><p><strong>使用 Ioc/DI 的优势是啥</strong></p><ul><li>可维护性好，方便进行单元测试和故障诊断，因为代码中的每一个 class 都可以单独测试，彼此之间没有联系，组件之间低耦合或者无耦合。</li><li>每个开发团队不需要关心别人写的业务逻辑，便于分工协助。</li><li>可复用性好，我们可以把具有普遍意义的组件独立出来反复使用到其他部门或其他项目中，其实这也是面向对象的思想。</li><li>生成对象的方式转为外置方式，在 Spring 中，我们把生成的对象直接写在配置文件中去定义使用，当我们需要更换一个实现类时，只需要修改配置文件即可，具有热插拔的特点。</li></ul><h2 id="入门-spring"><a href="#入门-spring" class="headerlink" title="入门 spring"></a>入门 spring</h2><p>spring 框架不断的升级，目前最新版本已经更新到了 5.2.5 了。但是在本文中我们使用的是4.3.6 来讲解，为了更好的创建一个 spring 项目我们使用的工具有下面：</p><ul><li>maven</li><li>idea 社区版</li></ul><p>同时由于 spring 的 jar 包 都在国外服务器，下载速度慢，所以我们使用阿里云的仓库进行加速</p><p>打开maven的配置文件(windows机器一般在maven安装目录的conf/settings.xml)，在标签中添加mirror子节点插入如下代码就可以使用阿里云的镜像加速下载 jar 包了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;aliyunmaven&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;阿里云公共仓库&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure><p>使用 idea 创建一个 maven 项目</p><p><img src="https://file.awen.me/blog/2020-03-26-145926.png!awen" alt=""></p><p>并在 pom.xml 的dependencies中添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.11&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-beans&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-beans&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>其中</p><ul><li>spring-core 包含了 spring 框架基本的核心工具类，spring 其他组件，比如 spingboot、springcloud 都要用到它。</li><li>spring-beans 所以应用都要用到的 jar 包，它包含了访问配置文件、创建和管理 bean 以及进行 Ioc和 DI 操作的相关类。</li><li>spring-context 提供了基础的 IoC 功能上的扩展服务。还提供了远程访问、缓存、邮件服务等各种试图层框架的封装。</li></ul><p><strong>spring 的核心容器</strong></p><p>spring 框架提供了两个最基本最重要的包 <strong>org.springframework.beans.factory</strong>和<strong>org.springframework.context</strong>。前者的主要接口是 <strong>BeanFactory</strong>，后者的主要接口是 <strong>ApplicationFactory</strong>。</p><p>IoC 框架的主要组件有 Beans、配置文件 applicationcontext.xml、Beanfactory 接口和相关类、ApplicationContext 接口和相关类。</p><p>Beans 是项目中为业务提供功能的 Bean，就是容器要管理的 Bean，也就是我们场景的 JavaBean、Java 类。</p><p>在 Spring 中 Bean 的管理是基于配置文件配置的，如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-4.3.xsd&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    xmlns 即 xml namespace xml 使用的命名空间</span><br><span class="line">    xmlns:xsi 即 xml schema instance xml 遵守的具体规范</span><br><span class="line">    xsi:schemaLocation 本文档 xml 遵守的规范 官方指定</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;org.example.UserServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;userDao&quot; ref&#x3D;&quot;userDao&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;org.example.UserDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>配置文件的名称可以是 applicationcontext.xml,也可以是其他，通常我们习惯使用 applicationcontext。</p><p>如上所示，在配置文件中xml  标签内的内容是指将定义xml 所遵循的规范。</p><p>Spring 要取得该 Bean 类，是根据bean标签中的 id、class 和 property name 和 ref  找到实例对象，从而获取对象的相关属性和值。通常多个 bean 包含在 beans 标签内，而 property 是 bean 对应的子元素。</p><p>BeanFactory 使用工厂涉及模式，负责读取 Bean 的配置文件，管理对象的生命周期和依赖关系，包括创建、加载和维护等。</p><p>org.springframework.beans.Factory.BeanFactory 是 BeanFactory 的顶级实现类。它会根据配置文件中的定义装载 Bean。Beanfactory 的常用方法有:</p><ul><li>getBea(String name) 可根据 Bean 的 id 生成 Bean 对象。</li><li>getBean(String name，Class requiredType) 可根据 Bean 的 id 和响应类生成 Bean 的对象。</li></ul><p>ApplicationContext 接口提供了高级功能的容器，基本与BeanFactory 一致，不同之处是:</p><ul><li>提供访问资源更方便。</li><li>支持国际化消息。</li><li>提供文件消息解析的方法</li><li>可以发布事件。</li></ul><p>ApplicationContext 接口实现类有：</p><ul><li>FileSystemXmlApplicationContext，从文件使用绝对路径引入 xml 文件加载上下文。</li><li>ClassPathXmlApplicationContext,从类路径的 XML 中加载上下文。</li><li>XmlWebApplicationContext，从 Web 系统中的 XML 加载上下文</li></ul><p>上面我们说了依赖注入和控制反转是对同一件事件的不同说明，依赖注入是在使用 spring 框架创建对象时，动态的将其所依赖的对象注入 Bean 组件中，一般通过量子方式</p><ul><li>属性 setter 方法注入</li><li>通过构造方法注入</li></ul><p>我们通过具体的案例来讲解</p><p>在 idea maven 项目中的 src 目录下建立如下目录结构</p><p><img src="https://file.awen.me/blog/2020-03-26-231537.png!awen" alt=""></p><p>首先，创建一个 UserDao 接口，定义一个 login()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void login();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个 UserDao 接口的实现类UserDaoImpl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void login() &#123;</span><br><span class="line">        System.out.println(&quot;UserDao login&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在src 目录下创建一个 applicationContext.xml 文件的 beans 标签下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;UserDao&quot; class&#x3D;&quot;org.example.UserDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>然后创建一个IoC，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class IoC &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;1.初始化 Spring 容器，加载配置文件</span><br><span class="line">        ApplicationContext applicationContext &#x3D; new</span><br><span class="line">                ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        &#x2F;&#x2F;2.通过容器获取 UserDao实例</span><br><span class="line">        UserDao userDao &#x3D; (UserDao) applicationContext.getBean(&quot;UserDao&quot;);</span><br><span class="line">        userDao.login();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后如下所示，我们可以看到通过 Spring 加载配置文件就可以操作就可以调用 userDao 的 login()方法。</p><p><img src="https://file.awen.me/blog/2020-03-26-232002.png!awen" alt=""></p><p>接下来演示 DI</p><p>首先，我们创建UserService接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    public void login();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个UserServiceImpl 实现类并在类中调用 userDao 的 login()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    &#x2F;&#x2F;声明 UserDao 属性</span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    &#x2F;&#x2F;添加 userDao 属性的 setter()方法，用于实现依赖注入</span><br><span class="line">    public void setUserDao(UserDao userDao)&#123;</span><br><span class="line">        this.userDao &#x3D; userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;实现接口中的方法</span><br><span class="line">    @Override</span><br><span class="line">    public void login() &#123;</span><br><span class="line">        this.userDao.login(); &#x2F;&#x2F;调用 userDao 中的 login() 方法</span><br><span class="line">        System.out.println(&quot;userService login&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 applicationContext.xml 中配置property name 设置为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;org.example.UserServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;userDao&quot; ref&#x3D;&quot;userDao&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;UserDao&quot; class&#x3D;&quot;org.example.UserDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>最后我们创建一个 DI.java，代码如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class DI &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        UserService userService &#x3D; (UserService) applicationContext.getBean(&quot;userService&quot;);</span><br><span class="line">        userService.login();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 DI，如下所示，我们可以看到Spring 通过userService实现类中的user.login()方法调用了 userDao 的 login()方法。</p><p><img src="https://file.awen.me/blog/2020-03-27-010805.png!awen" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-入门&quot;&gt;&lt;a href=&quot;#Spring-入门&quot; class=&quot;headerlink&quot; title=&quot;Spring 入门&quot;&gt;&lt;/a&gt;Spring 入门&lt;/h1&gt;&lt;p&gt;现在很多企业级的项目都是基于 spring 框架开发的，而这两年很火的微服务概念就有
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.awen.me/categories/Java/"/>
    
    
      <category term="spring" scheme="https://www.awen.me/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>公有云市场关闭潮或显端倪，企业如何选择服务商</title>
    <link href="https://www.awen.me/posts/2fe4a4b9.html"/>
    <id>https://www.awen.me/posts/2fe4a4b9.html</id>
    <published>2020-03-23T09:10:40.000Z</published>
    <updated>2021-02-26T06:05:29.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文版权归属 CSDN，作者 阿文</p></blockquote><p>2020年3月12日，美团云正式对外发布公告，称因业务调整，美团公有云将于2020年5月31日0：00起，停止对用户的服务与支持，并回收资源。资源回收后将无法找回数据。这也是美团云在内部放弃公有云后两年，正式披露停服时间。</p><p><img src="https://file.awen.me/blog/2020-03-23-045821.png!awen" alt=""></p><p>美团云是美团于2013年推出的公有云计算服务平台，成立至今，在华南、华北等多地建设了数据中心，并相继上线了云主机、存储、网络等产品。依托美团在O2O、餐饮、酒店、旅游等行业的经验，美团云还推出了餐饮云、酒店云、交通云等标准化行业解决方案。2015年，美团云正式独立运营，成立北京三快云计算有限公司。</p><p>除了美团云之前，在前几年各大巨头都纷纷推出公有云服务，例如滴滴云、百度云、京东云、金山云、华为云、网易云等等，各家推出的产品形态基本一致，都包含了云服务、数据库、对象存储、CDN、云硬盘等等。但是相比较阿里云、AWS、腾讯云等头部云计算厂商而言，这些企业进军公有云市场都比较晚。</p><p>据 IDC 最新发布的《中国公有云服务市场（2019上半年）跟踪》报告显示，2019上半年中国公有云服务整体市场规模达到54.2亿美元，其中IaaS市场增速稳健，同比增长72.2%，PaaS市场增速有所回落，同比增长92.6%。</p><p><img src="https://file.awen.me/blog/2020-03-23-053018.jpg!awen" alt=""></p><p>因此笔者认为，在未来<strong>公有云市场或将迎来一波大转型，一些三四线公有云厂商或关闭或转型为内部用户服务。</strong></p><p>对于三四线的中小型公有云厂商而言，他们所能够获得的用户并不多，因此投入的人力和物力也可想而知。因此在未来，这些厂商最终会关闭公有云服务或转型为内部用户服务以及私有云方向。</p><p>而目前公有云IaaS市场来看，<strong>阿里、腾讯、中国电信、AWS、华为位居前五</strong>，占据总体75.3%的市场份额。</p><p><strong>阿里云</strong>，调研机构Canalys近日发布了2019年第四季度中国公有云服务市场报告称阿里云在2019年四季度中国公有云市场阿里云排名第一，阿里云通过其强大的生态和运营能力以及多样化的产品，阿里在中国（华北、华东、华南、香港）、新加坡、美国（美东、美西）、欧洲、中东、澳大利亚、日本都有相应的产品和服务，阿里云持续助力互联网行业业务系统上云，不断深耕零售、政府和金融三大行业云化转型。阿里云每年都会举办一次规模巨大的“云栖大会”。</p><p>从 2009 年阿里巴巴收购万网到并合并到阿里云旗下，阿里云已经成为全球领先的云计算及人工智能科技公司。服务着制造、金融、政务、交通、医疗、电信、能源等众多领域的领军企业，包括中国联通、12306、中石化、中石油、飞利浦、华大基因等大型企业客户，以及微博等明星互联网公司。在双11全球狂欢节、12306春运购票等极富挑战的应用场景中，阿里云始终保持着良好的运行纪录。</p><p><strong>腾讯云</strong>借助腾讯集团其在游戏和视频领域的优势以及微信小程序等强大的生态转化能力优势，积极拓展产业互联网的发展机遇。同时腾讯云的产品形态也丰富多样、</p><p><strong>AWS</strong>凭借其国际市场的领先地位，继续保持在中国企业出海市场的领先优势。AWS 作为云计算的先行者和领导者制定了各种标准。</p><p><strong>华为云</strong>近几年驶入发展快车道，无论是从组织扩张、市场运营还是行业拓展上都表现突出。</p><p><strong>百度云</strong>正逐步融合百度集团的生态体系，在不断丰富云服务综合能力的同时，持续增强视频、金融等细分行业的精耕细作。在2019ABC INSPIRE 百度云智峰会上，百度副总裁、百度智能云总经理尹世明宣布，“百度云”品牌全面升级为“百度智能云”。而从 IDC 发布的报告上，我们可以看到百度在PaaS市场表现仍然亮眼，其加速将AI底层技术和应用能力向云输入，刺激了百度云在该市场的长足增长。</p><p>事实上，随着疫情的影响，中国云计算服务商反应迅速，为政府、企业提供了云端计算能力、数字化系统、人工智能等服务，做出了突出贡献。受疫情影响政府和企业上云意愿加强，大部分未上云的企业正在评估上云路径，在未来一段时间内云计算服务商将获得更多新客户。而对于这些新客户如何选择适合自己的云平台呢？</p><p>笔者认为，<strong>应该从企业的自身发展阶段以及各家云服务商给出的优惠力度和云厂商自身的产品性能等多个方面综合评估</strong>:</p><p>首先，企业可根据自身的预算多考察几家，包括头部企业和二三线云服务商，通过价格、产品形态和性能、稳定性等几个方面对比选择适合自己的平台。</p><p>第二，在选择云服务商时要重点考察下其运营能力和研发能力以及产品的完整性，可以通过阅读云厂商的官网文档分析对比出来，一个好的产品其文档应该是完整的详实的，从侧面也能看出来该云厂商的投入力度和研发能力。</p><p>第三，考察一个服务商的研发能力还有一个途径就是看其产品的迭代能力，可以考察其产品版本是否紧随开源产品的版本迭代，研发能力强的服务商其推出的产品版本或都较新，而同时研发能力强的企业通常在一些开源领域都会有所建树会积极投身和参与开源领域的产品迭代中。</p><p>第四，从售后流程和售后服务的态度来考察，当你遇到一些问题时是否能够快速的获得解决，这就包括上面说的文档的详实程度以及售后的服务水平。如何判断呢？可以通过考察官网文档以及问题的解决时间和质量上来考察。通常来说中小型客户如果选择使用大的服务商时一般所获得的支持力度会比较弱。因此不妨尝试使用一些二线优秀的服务商。</p><p>引用</p><p>1.IDC: 2019上半年中国公有云市场——硝烟四起，群雄逐鹿 <a href="https://www.idc.com/getdoc.jsp?containerId=prCHC45634819" target="_blank" rel="noopener">https://www.idc.com/getdoc.jsp?containerId=prCHC45634819</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文版权归属 CSDN，作者 阿文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2020年3月12日，美团云正式对外发布公告，称因业务调整，美团公有云将于2020年5月31日0：00起，停止对用户的服务与支持，并回收资源。资源回收后将无法找回数据。这
      
    
    </summary>
    
    
      <category term="云计算" scheme="https://www.awen.me/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="云计算" scheme="https://www.awen.me/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus 入门</title>
    <link href="https://www.awen.me/posts/4db42074.html"/>
    <id>https://www.awen.me/posts/4db42074.html</id>
    <published>2020-03-23T09:05:52.000Z</published>
    <updated>2021-02-26T06:05:29.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Prometheus"><a href="#什么是Prometheus" class="headerlink" title="什么是Prometheus"></a>什么是Prometheus</h2><p>Prometheus是最初在SoundCloud上构建的开源系统监视和警报工具包 。自2012年成立以来，许多公司和组织都采用了Prometheus，这个项目发展到今天，已经全面接管了 Kubernetes 项目的整套监控体系。</p><p>Prometheus 项目与 Kubernetes 项目一样，也来自于 Google 的 Borg 体系，它的原型系统，叫作 BorgMon，是一个几乎与 Borg 同时诞生的内部监控系统。</p><h2 id="使用prometheus-的优势"><a href="#使用prometheus-的优势" class="headerlink" title="使用prometheus 的优势"></a>使用prometheus 的优势</h2><p>Prometheus非常适合记录任何纯数字时间序列。它既适合以机器为中心的监视，也适合监视高度动态的面向服务的体系结构。在微服务世界中，它对多维数据收集和查询的支持是一种特别的优势。</p><p>Prometheus的设计旨在提高可靠性，使其成为中断期间要使用的系统，从而使您能够快速诊断问题。每个Prometheus服务器都是独立的，而不依赖于网络存储或其他远程服务。当基础结构的其他部分损坏时，您可以依靠它，而无需建立广泛的基础结构来使用它。</p><h2 id="Prometheus-不适合哪些场景"><a href="#Prometheus-不适合哪些场景" class="headerlink" title="Prometheus 不适合哪些场景"></a>Prometheus 不适合哪些场景</h2><p>普罗米修斯重视可靠性。即使在故障情况下，也始终可以查看有关系统的可用统计信息。但是如果您需要100％的准确性（例如按请求计费），则Prometheus并不是一个很好的选择，因为所收集的数据可能不会足够详细和完整。在这种情况下，最好使用其他系统来收集和分析计费数据，并使用Prometheus进行其余的监视。</p><h2 id="Prometheus-架构"><a href="#Prometheus-架构" class="headerlink" title="Prometheus 架构"></a>Prometheus 架构</h2><p>下图是 Prometheus 和它的组件的整体架构：</p><p><img src="https://file.awen.me/blog/20191224143003.png" alt=""></p><p><strong>从图中可看到包含以下主要组件：</strong></p><ul><li>Prometheus Server: 用于收集和存储时间序列数据。Prometheus Server是Prometheus组件中的核心部分，负责实现对监控数据的获取，存储以及查询。 Prometheus Server可以通过静态配置管理监控目标，也可以配合使用Service Discovery的方式动态管理监控目标，并从这些监控目标中获取数据。其次Prometheus Server需要对采集到的监控数据进行存储，Prometheus Server本身就是一个时序数据库，将采集到的监控数据按照时间序列的方式存储在本地磁盘当中。最后Prometheus Server对外提供了自定义的PromQL语言，实现对数据的查询以及分析。</li><li>Client Library: 客户端库，为需要监控的服务生成相应的 metrics 并暴露给 Prometheus server。当 Prometheus server 来 pull 时，直接返回实时状态的 metrics。</li><li>Push Gateway: 主要用于短期的 jobs。由于这类 jobs 存在时间较短，可能在 Prometheus 来 pull 之前就消失了。为此，这些 jobs 可以直接向 Prometheus server 端推送它们的 metrics。</li><li>Exporters: 用于暴露已有的第三方服务的 metrics 给 Prometheus。Exporter将监控数据采集的端点通过HTTP服务的形式暴露给Prometheus Server，Prometheus Server通过访问该Exporter提供的Endpoint端点，即可获取到需要采集的监控数据。</li><li>Alertmanager: 从 Prometheus server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对方的接受方式，发出报警。常见的接收方式有：电子邮件，pagerduty 等。</li><li>WEB UI：Prometheus Server内置的Express Browser UI，通过这个UI可以直接通过PromQL实现数据的查询以及可视化。<br>一些其他的工具。</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><strong>Prometheus的主要特点是：</strong></p><ul><li>多维数据模型（有metric名称和键值对确定的时间序列）</li><li>灵活的查询语言</li><li>不依赖分布式存储</li><li>通过pull方式采集时间序列，通过http协议传输</li><li>支持通过中介网关的push时间序列的方式</li><li>监控数据通过服务或者静态配置来发现</li><li>支持图表和dashboard等多种方式</li></ul><p><strong>Prometheus包含多个组件，其中有许多是可选的，例如：</strong></p><ul><li>Prometheus主服务器，用来收集和存储时间序列数据</li><li>应用程序client代码库</li><li>短时jobs的push gateway</li><li>基于Rails/SQL的GUI dashboard</li><li>特殊用途的exporter（包括HAProxy、StatsD、Ganglia等）</li><li>用于报警的alertmanager</li><li>命令行工具查询</li><li>大多数的组件都是用Go来完成的，使得它们方便构建和部署。</li></ul><h2 id="下载并运行"><a href="#下载并运行" class="headerlink" title="下载并运行"></a>下载并运行</h2><p>直接去GitHub 下载最新的版本<br>官网网站 <a href="https://prometheus.io/" target="_blank" rel="noopener">https://prometheus.io/</a><br>下载地址 <a href="https://github.com/prometheus/prometheus/releases" target="_blank" rel="noopener">https://github.com/prometheus/prometheus/releases</a></p><p>下载后解压并进入到目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s prometheus-2.15.0.linux-amd64]# ls</span><br><span class="line">console_libraries  consoles  data  LICENSE  NOTICE  prometheus  prometheus.yml  promtool  tsdb</span><br><span class="line">[root@k8s prometheus-2.15.0.linux-amd64]# .&#x2F;prometheus</span><br></pre></td></tr></table></figure><p>启动后程序会输出一些日志，默认监听的端口是9090，使用的是prometheus目录下的prometheus.yaml 配置文件，程序启动时首选会启动prometheus，然后启动TSDB(时序数据库)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.601Z caller&#x3D;main.go:294 msg&#x3D;&quot;no time or size retention was set so using the default time retention&quot; duration&#x3D;15d</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.601Z caller&#x3D;main.go:330 msg&#x3D;&quot;Starting Prometheus&quot; version&#x3D;&quot;(version&#x3D;2.15.0, branch&#x3D;HEAD, revision&#x3D;ec1868b0267d13cb5967286fd5ec6afff507905b)&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.601Z caller&#x3D;main.go:331 build_context&#x3D;&quot;(go&#x3D;go1.13.5, user&#x3D;root@240f2f89177f, date&#x3D;20191223-12:03:32)&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.601Z caller&#x3D;main.go:332 host_details&#x3D;&quot;(Linux 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 k8s (none))&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.601Z caller&#x3D;main.go:333 fd_limits&#x3D;&quot;(soft&#x3D;1024, hard&#x3D;4096)&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.602Z caller&#x3D;main.go:334 vm_limits&#x3D;&quot;(soft&#x3D;unlimited, hard&#x3D;unlimited)&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.604Z caller&#x3D;main.go:648 msg&#x3D;&quot;Starting TSDB ...&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.604Z caller&#x3D;web.go:506 component&#x3D;web msg&#x3D;&quot;Start listening for connections&quot; address&#x3D;0.0.0.0:9090</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.607Z caller&#x3D;head.go:584 component&#x3D;tsdb msg&#x3D;&quot;replaying WAL, this may take awhile&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.612Z caller&#x3D;head.go:632 component&#x3D;tsdb msg&#x3D;&quot;WAL segment loaded&quot; segment&#x3D;0 maxSegment&#x3D;2</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.616Z caller&#x3D;head.go:632 component&#x3D;tsdb msg&#x3D;&quot;WAL segment loaded&quot; segment&#x3D;1 maxSegment&#x3D;2</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.617Z caller&#x3D;head.go:632 component&#x3D;tsdb msg&#x3D;&quot;WAL segment loaded&quot; segment&#x3D;2 maxSegment&#x3D;2</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.618Z caller&#x3D;main.go:663 fs_type&#x3D;EXT4_SUPER_MAGIC</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.618Z caller&#x3D;main.go:664 msg&#x3D;&quot;TSDB started&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.619Z caller&#x3D;main.go:734 msg&#x3D;&quot;Loading configuration file&quot; filename&#x3D;prometheus.yml</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.620Z caller&#x3D;main.go:762 msg&#x3D;&quot;Completed loading of configuration file&quot; filename&#x3D;prometheus.yml</span><br><span class="line">level&#x3D;info ts&#x3D;2019-12-24T06:34:56.620Z caller&#x3D;main.go:617 msg&#x3D;&quot;Server is ready to receive web requests.&quot;</span><br></pre></td></tr></table></figure><p>此时通过浏览器访问，可以看到如下界面，这就是prometheus 的控制台</p><p><img src="https://file.awen.me/blog/20191224144035.png" alt=""></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>prometheus.yml 是prometheus 的配置文件，您可以使用如下命令来指定配置文件启动 prometheus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prometheus --config.file&#x3D;prometheus.yml</span><br></pre></td></tr></table></figure><p>它的默认配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># cat prometheus.yml</span><br><span class="line"># my global config</span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape_timeout is set to the global default (10s).</span><br><span class="line"></span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      # - alertmanager:9093</span><br><span class="line"></span><br><span class="line"># Load rules once and periodically evaluate them according to the global &#39;evaluation_interval&#39;.</span><br><span class="line">rule_files:</span><br><span class="line">  # - &quot;first_rules.yml&quot;</span><br><span class="line">  # - &quot;second_rules.yml&quot;</span><br><span class="line"></span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&#39;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line">  # The job name is added as a label &#96;job&#x3D;&lt;job_name&gt;&#96; to any timeseries scraped from this config.</span><br><span class="line">  - job_name: &#39;prometheus&#39;</span><br><span class="line"></span><br><span class="line">    # metrics_path defaults to &#39;&#x2F;metrics&#39;</span><br><span class="line">    # scheme defaults to &#39;http&#39;.</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#39;localhost:9090&#39;]</span><br></pre></td></tr></table></figure><p>包括了</p><ul><li>global 全局配置</li><li>alerting  用来接收prometheus发出的告警，然后按照配置文件的要求，将告警用对应的方式发送出去。</li><li>rule_files  指定加载的告警规则文件</li><li>scrape_configs 指定prometheus要监控的目标</li><li></li></ul><p><strong>其中global是一些常规的全局配置，这里只列出了两个参数：</strong></p><ul><li>scrape_interval:     15s      #每15s采集一次数据</li><li>evaluation_interval: 15s      #每15s做一次告警检测</li></ul><p>scrape_configs指定prometheus要监控的目标，在scrape_config 中每个监控目标是一个 job，但job的类型有很多种。可以是最简单的static_config，即静态地指定每一个目标，例如上面的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- job_name: prometheus</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets: [&#39;localhost:9090&#39;]</span><br></pre></td></tr></table></figure><p>默认的配置文件scrape_configs 定义了一个job 对 prometheus 自身进行监控。您可以访问ip:9090/metrics 来访问 prometheus  自身的监控数据</p><p><img src="https://file.awen.me/blog/20191225100349.png" alt=""></p><p>我们用浏览器访问<code>http://host:9090/metrics</code>，即可看到一个instance向外暴露的监控指标。除了注释外，其它每一行都是一个监控指标项，大部分指标形如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go_info&#123;version&#x3D;&quot;go1.10.3&quot;&#125; 1</span><br></pre></td></tr></table></figure><p>这里<code>go_info</code>即为度量指标名称，<code>version</code>为这个度量指标的标签，<code>go1.10.3</code>为这个度量指标version标签的值，<code>1</code>为这个度量指标当前采样的值，一个度量指标的标签可以有0个或多个标签。这就是上面说到的监控指标数据模型。</p><p>可以看到有些度量指标的形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go_memstats_frees_total 131961</span><br></pre></td></tr></table></figure><p>按prometheus官方建议的规范，以<code>_total</code>为后缀的度量指标一般类型是counter计数器类型。</p><p>有些度量指标的形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go_memstats_gc_sys_bytes 213408</span><br></pre></td></tr></table></figure><p>这种度量指标一般类型是gauge测量器类型。</p><p>有些度量指标的形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prometheus_http_response_size_bytes_bucket&#123;handler&#x3D;&quot;&#x2F;metrics&quot;,le&#x3D;&quot;100&quot;&#125; 0prometheus_http_response_size_bytes_bucket&#123;handler&#x3D;&quot;&#x2F;metrics&quot;,le&#x3D;&quot;1000&quot;&#125; 0prometheus_http_response_size_bytes_bucket&#123;handler&#x3D;&quot;&#x2F;metrics&quot;,le&#x3D;&quot;10000&quot;&#125; 46prometheus_http_response_size_bytes_bucket&#123;handler&#x3D;&quot;&#x2F;metrics&quot;,le&#x3D;&quot;100000&quot;&#125; 46prometheus_http_response_size_bytes_bucket&#123;handler&#x3D;&quot;&#x2F;metrics&quot;,le&#x3D;&quot;1e+06&quot;&#125; 46prometheus_http_response_size_bytes_bucket&#123;handler&#x3D;&quot;&#x2F;metrics&quot;,le&#x3D;&quot;1e+07&quot;&#125; 46prometheus_http_response_size_bytes_bucket&#123;handler&#x3D;&quot;&#x2F;metrics&quot;,le&#x3D;&quot;1e+08&quot;&#125; 46prometheus_http_response_size_bytes_bucket&#123;handler&#x3D;&quot;&#x2F;metrics&quot;,le&#x3D;&quot;1e+09&quot;&#125; 46prometheus_http_response_size_bytes_bucket&#123;handler&#x3D;&quot;&#x2F;metrics&quot;,le&#x3D;&quot;+Inf&quot;&#125; 46prometheus_http_response_size_bytes_sum&#123;handler&#x3D;&quot;&#x2F;metrics&quot;&#125; 234233prometheus_http_response_size_bytes_count&#123;handler&#x3D;&quot;&#x2F;metrics&quot;&#125; 46</span><br></pre></td></tr></table></figure><p>这种就是histogram柱状图类型。</p><p>还有的形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go_gc_duration_seconds&#123;quantile&#x3D;&quot;0&quot;&#125; 7.3318e-05go_gc_duration_seconds&#123;quantile&#x3D;&quot;0.25&quot;&#125; 0.000118693go_gc_duration_seconds&#123;quantile&#x3D;&quot;0.5&quot;&#125; 0.000236845go_gc_duration_seconds&#123;quantile&#x3D;&quot;0.75&quot;&#125; 0.000337872go_gc_duration_seconds&#123;quantile&#x3D;&quot;1&quot;&#125; 0.000707002go_gc_duration_seconds_sum 0.003731953go_gc_duration_seconds_count 14</span><br></pre></td></tr></table></figure><p>这种就是summary总结类型。</p><p>更多关于配置相关的说明，可以阅读<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/" target="_blank" rel="noopener">官网文档</a></p><h2 id="prometheus-的一些概念"><a href="#prometheus-的一些概念" class="headerlink" title="prometheus 的一些概念"></a>prometheus 的一些概念</h2><h3 id="Jobs和Instances-任务和实例"><a href="#Jobs和Instances-任务和实例" class="headerlink" title="Jobs和Instances(任务和实例)"></a>Jobs和Instances(任务和实例)</h3><p>就Prometheus而言，pull拉取采样点的端点服务称之为instance。多个这样pull拉取采样点的instance, 则构成了一个job。</p><p>例如, 一个被称作api-server的任务有四个相同的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job: api-server   instance 1：1.2.3.4:5670   instance 2：1.2.3.4:5671   instance 3：5.6.7.8:5670   instance 4：5.6.7.8:5671</span><br></pre></td></tr></table></figure><h4 id="自动化生成的标签和时间序列"><a href="#自动化生成的标签和时间序列" class="headerlink" title="自动化生成的标签和时间序列"></a>自动化生成的标签和时间序列</h4><p>当Prometheus拉取一个目标, 会自动地把两个标签添加到度量名称的标签列表中，分别是：</p><p>job: 目标所属的配置任务名称api-server。 instance: 采样点所在服务: host:port 如果以上两个标签二者之一存在于采样点中，这个取决于honor_labels配置选项。</p><p>对于每个采样点所在服务instance，Prometheus都会存储以下的度量指标采样点：</p><ul><li>up{job=”[job-name]”, instance=”instance-id”}: up值=1，表示采样点所在服务健康; 否则，网络不通, 或者服务挂掉了</li><li>scrape_duration_seconds{job=”[job-name]”, instance=”[instance-id]”}: 尝试获取目前采样点的时间开销</li><li>scrape_samples_scraped{job=”[job-name]”, instance=”[instance-id]”}: 这个采样点目标暴露的样本点数量</li></ul><p><strong>up度量指标对服务健康的监控是非常有用的</strong>。</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>Prometheus从根本上存储的所有数据都是<a href="http://en.wikipedia.org/wiki/Time_series" target="_blank" rel="noopener">时间序列</a>: 具有时间戳的数据流只属于单个度量指标和该度量指标下的多个标签维度。除了存储时间序列数据外，Prometheus也可以利用查询表达式存储5分钟的返回结果中的时间序列数据</p><h4 id="metrics和labels-度量指标名称和标签"><a href="#metrics和labels-度量指标名称和标签" class="headerlink" title="metrics和labels(度量指标名称和标签)"></a>metrics和labels(度量指标名称和标签)</h4><p>每一个时间序列数据由metric度量指标名称和它的标签labels键值对集合唯一确定。</p><p>这个metric度量指标名称指定监控目标系统的测量特征（如：<code>http_requests_total</code>- 接收http请求的总计数）. metric度量指标命名ASCII字母、数字、下划线和冒号，他必须配正则表达式<code>[a-zA-Z_:][a-zA-Z0-9_:]*</code>。</p><p>标签开启了Prometheus的多维数据模型：对于相同的度量名称，通过不同标签列表的结合, 会形成特定的度量维度实例。(例如：所有包含度量名称为<code>/api/tracks</code>的http请求，打上<code>method=POST</code>的标签，则形成了具体的http请求)。这个查询语言在这些度量和标签列表的基础上进行过滤和聚合。改变任何度量上的任何标签值，则会形成新的时间序列图</p><p>标签label名称可以包含ASCII字母、数字和下划线。它们必须匹配正则表达式<code>[a-zA-Z_][a-zA-Z0-9_]*</code>。带有<code>_</code>下划线的标签名称被保留内部使用。</p><p>标签labels值包含任意的Unicode码。</p><h4 id="有序的采样值"><a href="#有序的采样值" class="headerlink" title="有序的采样值"></a>有序的采样值</h4><p>有序的采样值形成了实际的时间序列数据列表。每个采样值包括：</p><ul><li>一个64位的浮点值</li><li>一个精确到毫秒级的时间戳 一个样本数据集是针对一个指定的时间序列在一定时间范围的数据收集。这个时间序列是由<metric_name>{<label_name>=<label_value>, …}</li></ul><p>‘‘小结：指定度量名称和度量指标下的相关标签值，则确定了所关心的目标数据，随着时间推移形成一个个点，在图表上实时绘制动态变化的线条’’</p><h4 id="Notation-符号"><a href="#Notation-符号" class="headerlink" title="Notation(符号)"></a>Notation(符号)</h4><p>表示一个度量指标和一组键值对标签，需要使用以下符号：</p><blockquote><p>[metric name]{[label name]=[label value], …}</p></blockquote><p>例如，度量指标名称是<code>api_http_requests_total</code>， 标签为<code>method=&quot;POST&quot;</code>, <code>handler=&quot;/messages&quot;</code> 的示例如下所示：</p><blockquote><p>api_http_requests_total{method=”POST”, handler=”/messages”}</p></blockquote><p>这些命名和OpenTSDB使用方法是一样的</p><h3 id="metrics类型"><a href="#metrics类型" class="headerlink" title="metrics类型"></a>metrics类型</h3><hr><p>Prometheus 提供了四个核心的metrics类型。这四种类型目前仅在客户库和wire协议中区分。Prometheus服务还没有充分利用这些类型。不久的将来就会发生改变。</p><h4 id="Counter-计数器"><a href="#Counter-计数器" class="headerlink" title="Counter(计数器)"></a>Counter(计数器)</h4><p><em>counter</em> 是一个累计度量指标，它是一个只能递增的数值。计数器主要用于统计服务的请求数、任务完成数和错误出现的次数等等。计数器是一个递增的值。反例：统计goroutines的数量。</p><h4 id="Gauge-测量器"><a href="#Gauge-测量器" class="headerlink" title="Gauge(测量器)"></a>Gauge(测量器)</h4><p><em>gauge</em>是一个度量指标，它表示一个既可以递增, 又可以递减的值。</p><p>测量器主要测量类似于温度、当前内存使用量等，也可以统计当前服务运行随时增加或者减少的Goroutines数量</p><h4 id="Histogram-柱状图"><a href="#Histogram-柱状图" class="headerlink" title="Histogram(柱状图)"></a>Histogram(柱状图)</h4><p><em>histogram</em>，是柱状图，在Prometheus系统中的查询语言中，有三种作用：</p><ol><li>对每个采样点进行统计，打到各个分类值中(bucket)</li><li>对每个采样点值累计和(sum)</li><li>对采样点的次数累计和(count)</li></ol><p>度量指标名称: <code>[basename]</code>的柱状图, 上面三类的作用度量指标名称</p><ul><li>[basename]_bucket{le=”上边界”}, 这个值为小于等于上边界的所有采样点数量</li><li>[basename]_sum</li><li>[basename]_count</li></ul><p>小结：所以如果定义一个度量类型为Histogram，则Prometheus系统会自动生成三个对应的指标</p><p>使用<a href="https://prometheus.io/docs/querying/functions/#histogram_quantile" target="_blank" rel="noopener">histogram_quantile()</a>函数, 计算直方图或者是直方图聚合计算的分位数阈值。 一个直方图计算<a href="http://en.wikipedia.org/wiki/Apdex" target="_blank" rel="noopener">Apdex值</a>也是合适的, 当在buckets上操作时，记住直方图是累计的。</p><h4 id="Summary-总结"><a href="#Summary-总结" class="headerlink" title="[Summary]总结"></a>[Summary]总结</h4><p>类似<em>histogram</em>柱状图，<em>summary</em>是采样点分位图统计，(通常的使用场景：请求持续时间和响应大小)。 它也有三种作用：</p><ol><li>对于每个采样点进行统计，并形成分位图。（如：正态分布一样，统计低于60分不及格的同学比例，统计低于80分的同学比例，统计低于95分的同学比例）</li><li>统计班上所有同学的总成绩(sum)</li><li>统计班上同学的考试总人数(count)</li></ol><p>带有度量指标的<code>[basename]</code>的<code>summary</code> 在抓取时间序列数据展示。</p><ul><li>观察时间的φ-quantiles (0 ≤ φ ≤ 1), 显示为<code>[basename]{分位数=&quot;[φ]&quot;}</code></li><li><code>[basename]_sum</code>， 是指所有观察值的总和</li><li><code>[basename]_count</code>, 是指已观察到的事件计数值</li></ul><h2 id="自定义监控上报"><a href="#自定义监控上报" class="headerlink" title="自定义监控上报"></a>自定义监控上报</h2><h2 id="监控指标上报"><a href="#监控指标上报" class="headerlink" title="监控指标上报"></a>监控指标上报</h2><h4 id="系统自带的-exporter"><a href="#系统自带的-exporter" class="headerlink" title="系统自带的 exporter"></a>系统自带的 exporter</h4><p>在prometheus的世界里70%的场景并不需要专门写埋点逻辑代码，因为已经有现成的各类exporter了，只要找到合适的exporter，启动exporter就直接暴露出一个符合prometheus规范的服务端点了。</p><p>exporter列表参见<a href="https://prometheus.io/docs/instrumenting/exporters/" target="_blank" rel="noopener">这里</a>，另外<a href="https://github.com/prometheus" target="_blank" rel="noopener">官方git仓库</a>里也有一些exporter。</p><p>举例，在某个宿主机上运行<a href="https://github.com/prometheus/node_exporter" target="_blank" rel="noopener">node_exporter</a>后，以Centos为例，安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curl -Lo &#x2F;etc&#x2F;yum.repos.d&#x2F;_copr_ibotty-prometheus-exporters.repo https:&#x2F;&#x2F;copr.fedorainfracloud.org&#x2F;coprs&#x2F;ibotty&#x2F;prometheus-exporters&#x2F;repo&#x2F;epel-7&#x2F;ibotty-prometheus-exporters-epel-7.repo</span><br><span class="line"># yum install node_exporter</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_exporter</span><br></pre></td></tr></table></figure><p>如图所示</p><p><img src="https://file.awen.me/blog/20191225110253.png" alt=""></p><p>用浏览器访问<code>http://${host_ip}:9100/metrics</code>即可看到node_exporter暴露出的这个宿主机各类监控指标数据</p><p><img src="https://file.awen.me/blog/20191225110350.png" alt=""></p><p>然后在prometheus的配置文件里加入以下一段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  ......</span><br><span class="line">  - job_name: &#39;node_monitor_demo&#39;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#39;$&#123;host_ip&#125;:9100&#39;]</span><br></pre></td></tr></table></figure><p>然后在prometheus的web管理控制台里就可以查询到相应的监控指标了。在<code>http://${HOST}:9090/graph</code>界面里输入<code>go_memstats_alloc_bytes{instance=&quot;${host_ip}:9100&quot;}</code>点击<code>Execute</code>按钮即可。</p><blockquote><p>将 ${host_ip} 替换成你的IP </p></blockquote><p>如图</p><p><img src="https://file.awen.me/blog/20191225105432.png" alt=""></p><p>在控制台中，切换到Graph 可以看到对应的监控图标，在图标列中可以显示对应job 的监控指标</p><p><img src="https://file.awen.me/blog/20191225105614.png" alt=""></p><h3 id="编写自定义的监控代码"><a href="#编写自定义的监控代码" class="headerlink" title="编写自定义的监控代码"></a>编写自定义的监控代码</h3><p>假如你的监控指标很特殊，需要自己写埋点上报逻辑代码，也是比较简单的。已经有<a href="https://prometheus.io/docs/instrumenting/clientlibs/" target="_blank" rel="noopener">各个语言的Client Libraries</a>了，照着示例写就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Prometheus&quot;&gt;&lt;a href=&quot;#什么是Prometheus&quot; class=&quot;headerlink&quot; title=&quot;什么是Prometheus&quot;&gt;&lt;/a&gt;什么是Prometheus&lt;/h2&gt;&lt;p&gt;Prometheus是最初在SoundCloud上构
      
    
    </summary>
    
    
      <category term="监控" scheme="https://www.awen.me/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="Prometheus" scheme="https://www.awen.me/tags/Prometheus/"/>
    
  </entry>
  
</feed>
